{
  "version": 3,
  "sources": ["../node_modules/@templatone/utils/lib/Numbers.js", "../node_modules/@templatone/utils/lib/Regex.js", "../node_modules/@templatone/utils/lib/web-modules/pkg/webfontloader.js", "../src/core/RenderingLayer.ts", "../src/styles/Color.ts", "../src/styles/Style.ts", "../src/properties/Fill.ts", "../src/properties/Font.ts", "../src/properties/Stroke.ts", "../src/units/Angle.ts", "../src/units/Vector.ts", "../src/properties/Shadow.ts", "../src/properties/Transform.ts", "../src/units/BezierPoint.ts", "../src/compositors/Compositor.ts", "../src/compositors/TrackAlphaCompositor.ts", "../src/repeaters/Loop.ts", "../src/core/Engine.ts", "../src/renderables/geometries/Geometry.ts", "../src/renderables/geometries/BezierGeometry.ts", "../src/renderables/geometries/EllipseGeometry.ts", "../src/renderables/geometries/PieGeometry.ts", "../src/renderables/geometries/PolygonGeometry.ts", "../src/renderables/geometries/RectangleGeometry.ts", "../src/renderables/geometries/RoundedRectangleGeometry.ts", "../src/renderables/geometries/TrimablePolygonGeometry.ts", "../src/debugger/Gizmo.ts", "../src/renderables/shapes/Shape.ts", "../src/renderables/shapes/BezierShape.ts", "../src/renderables/shapes/EllipseShape.ts", "../src/renderables/shapes/PieShape.ts", "../src/renderables/shapes/PolygonShape.ts", "../src/renderables/shapes/RectangleShape.ts", "../src/renderables/shapes/RoundedRectangleShape.ts", "../src/renderables/shapes/TrimablePolygonShape.ts", "../src/renderables/ImageObject.ts", "../src/renderables/ImageSliceObject.ts", "../src/renderables/VideoObject.ts", "../src/renderables/NullObject.ts", "../src/renderables/TextObject.ts", "../src/styles/Gradient.ts", "../src/styles/LinearGradient.ts", "../src/styles/RadialGradient.ts"],
  "sourcesContent": ["export class Numbers {\n  static remap(value, min1, max1, min2 = 0, max2 = 1) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n  }\n  static limit(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n  }\n  static randomArbitrary(min = 0, max = 1) {\n    return Math.random() * (max - min) + min;\n  }\n  static randomInt(min = 0, max = 1) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n  static bezierCurve2(t, p1, p2) {\n    const compute = (t2, v1, v2) => {\n      return (1 - t2) * v1 + t2 * v2;\n    };\n    return {\n      x: compute(t, p1.x, p2.x),\n      y: compute(t, p1.y, p2.y)\n    };\n  }\n  static bezierCurve3(t, p1, p2, p3) {\n    const compute = (t2, v1, v2, v3) => {\n      return (1 - t2) ** 2 * v1 + 2 * (1 - t2) * t2 * v2 + t2 ** 2 * v3;\n    };\n    return {\n      x: compute(t, p1.x, p2.x, p3.x),\n      y: compute(t, p1.y, p2.y, p3.y)\n    };\n  }\n  static bezierCurve4(t, p1, p2, p3, p4) {\n    const compute = (t2, v1, v2, v3, v4) => {\n      return (1 - t2) ** 3 * v1 + 3 * (1 - t2) ** 2 * t2 * v2 + 3 * (1 - t2) * t2 ** 2 * v3 + t2 ** 3 * v4;\n    };\n    return {\n      x: compute(t, p1.x, p2.x, p3.x, p4.x),\n      y: compute(t, p1.y, p2.y, p3.y, p4.y)\n    };\n  }\n}\n", "const _Regex = class {\n  static breakLines() {\n    return _Regex._regexp.breakLines;\n  }\n};\nexport let Regex = _Regex;\nRegex._regexp = {\n  breakLines: /\\r{0,1}\\n/g\n};\n", "function createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t\tpath: basedir,\n\t\texports: {},\n\t\trequire: function (path, base) {\n\t\t\treturn commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n\t\t}\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar webfontloader = createCommonjsModule(function (module) {\n/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return +new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document;}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild);}function v(a){a.parentNode&&a.parentNode.removeChild(a);}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e]);}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e]);}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\");}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return !0;return !1}\nfunction ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null);}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d();},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d();}):setTimeout(function(){e=!0;d();},0);u(a,\"head\",b);}\nfunction A(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f));};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")));},d||5E3);return f}return null}function B(){this.a=0;this.c=null;}function C(a){a.a++;return function(){a.a--;D(a);}}function E(a,b){a.c=b;D(a);}function D(a){0==a.a&&a.c&&(a.c(),a.c=null);}function F(a){this.a=a||\"-\";}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10));}function fa(a){return H(a)+\" \"+(a.f+\"00\")+\" 300px \"+I(a.c)}function I(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d);}return b.join(\",\")}function J(a){return a.a+a.f}function H(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b}function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes;}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);K(a,\"loading\");}function L(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d);}K(a,\"inactive\");}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]();}function ja(){this.c={};}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c));}return d}function M(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f);}function N(a){u(a.c,\"body\",a.a);}function O(a){return \"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+I(a.c)+\";\"+(\"font-style:\"+H(a)+\";font-weight:\"+(a.f+\"00\")+\";\")}function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0;}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25);},function(){e();});}f();}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f);});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a);},function(){b.j(b.a);});};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+\",serif\",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+\",sans-serif\",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G(\"serif\",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G(\"sans-serif\",J(this.a));a=\nO(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m);}var R={D:\"serif\",C:\"sans-serif\"},S=null;function T(){if(null===S){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10));}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.m.a.offsetWidth;this.A=q();U(this);};\nfunction la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return !0;return !1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v);}function ma(a){setTimeout(p(function(){U(this);},a),50);}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a);},a),0);}function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c;}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,J(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\")]);K(b,\"fontactive\",a);this.m=!0;na(this);};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,J(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,J(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,J(a).toString(),\"inactive\"));w(b.f,d,e);}K(b,\"fontinactive\",a);na(this);};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),K(a,\"active\")):L(a.a));}function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0;}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a);};\nfunction qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else {b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c(\"wf\",x.c,J(x).toString(),\"loading\")]);K(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):xa?!1:!0;}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r);}for(h=0;h<l.length;h++)l[h].start();}},0);}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c);});}function ra(a,b){this.c=a;this.a=b;}\nra.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k));}a(e);}else setTimeout(function(){b();},50);}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||\"https://fast.fonts.net/jsapi\")+\"/\"+d+\".js\"+(e?\"?v=\"+e:\"\"),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+\nd]=function(){return c.a},b());}).id=\"__MonotypeAPIScript__\"+d;}else a([]);};function sa(a,b){this.c=a;this.a=b;}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f);});};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||\"\";}var ua=\"https://fonts.googleapis.com/css\";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f));}}\nfunction wa(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b}function ya(a){this.f=a;this.a=[];this.c={};}\nvar za={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Aa={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Ba={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nCa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(\",\"),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k=\"\";else {k=n[2];k=null==k||\"\"==k?\"n\":Ba[k];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Aa[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);k=[k,n].join(\"\");}}else k=\"\";k&&g.push(k);}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=za[d[0]])&&(a.c[e]=d));}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]));}}function Ea(a,b){this.c=a;this.a=b;}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa);});};function Ga(a,b){this.c=a;this.a=b;}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0});}catch(l){}a(e);}},2E3):a([]);};function Ha(a,b){this.c=a;this.f=b;this.a=[];}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)));}a(d.a);},A(this.c,(this.f.api||\"https://f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([]);})):a([]);};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)};module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n});\n\nexport default webfontloader;\n", "import { type Transform } from \"../properties/Transform\";\n\nimport { type UpdateSizeCallbackType } from \"./UpdateSizeCallbackType\";\nimport { type IRenderingLayer } from \"./IRenderingLayer\";\n\nexport type { UpdateSizeCallbackType } from \"./UpdateSizeCallbackType\";\nexport { type IRenderingLayer } from \"./IRenderingLayer\";\n\n\nexport class RenderingLayer implements IRenderingLayer {\n    static readonly DefaultUpdatesizeCallback: UpdateSizeCallbackType = (canvas: HTMLCanvasElement, width: number, height: number, pixelScale: number): void => {\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n    }\n\n\n    get width(): number { return this.#width; }\n    #width: number = 0;\n\n    get height(): number { return this.#height; }\n    #height: number = 0;\n\n\n    get pixelScale(): number { return this.#pixelScale; }\n    #pixelScale: number = 1;\n\n\n    get renderingSettings(): CanvasRenderingContext2DSettings { return this.#renderingSettings; }\n    #renderingSettings: CanvasRenderingContext2DSettings = {\n        willReadFrequently: true,\n        colorSpace: 'srgb'\n    };\n\n\n    #updateSizeCallback: UpdateSizeCallbackType = RenderingLayer.DefaultUpdatesizeCallback;\n\n    #canvas: HTMLCanvasElement;\n    #renderingContext!: CanvasRenderingContext2D;\n\n\n    gizmoVisibility: boolean = false;\n    gizmoScale: number = 1;\n\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelScale?: number, renderingSettings?: CanvasRenderingContext2DSettings) {\n        this.#canvas = canvas;\n\n        this.setSize(width, height);\n        \n        if (pixelScale) this.setPixelScale(pixelScale)\n        if (renderingSettings) this.setRenderingSettings(renderingSettings);\n    }\n\n\n    /**\n     * @param width Width of canvas.\n     * @param height Height of canvas.\n     */\n    setSize(width: number, height: number) {\n        this.#width = Math.max(width, 0);\n        this.#height = Math.max(height, 0);\n\n        this._updateCanvas();\n    }\n\n\n    setPixelScale(pixelScale: number) {\n        this.#pixelScale = Math.max(0, pixelScale);\n        this._updateCanvas();\n    }\n\n\n    setRenderingSettings(settings: CanvasRenderingContext2DSettings) {\n        this.#renderingSettings = settings;\n        this._updateCanvas();\n    }\n\n\n    setUpdateSizeCallback(callback: UpdateSizeCallbackType) {\n        this.#updateSizeCallback = callback;\n        this._updateCanvas();\n    }\n\n    private _updateCanvas() {\n        this.#canvas.width = this.width * this.pixelScale;\n        this.#canvas.height = this.height * this.pixelScale;\n\n        this.#updateSizeCallback(this.#canvas, this.width, this.height, this.pixelScale);\n        this.resetRenderingContext();\n    }\n\n\n    clear() {\n        const pxs = this.pixelScale;\n\n        this.resetMatrix();\n        this.#renderingContext.clearRect(0, 0, this.width * pxs, this.height * pxs);\n    }\n\n\n    getRenderingContext(): CanvasRenderingContext2D {\n        return this.#renderingContext;\n    }\n\n\n    resetRenderingContext() {\n        this.#renderingContext = this.#canvas.getContext('2d', this.renderingSettings) as CanvasRenderingContext2D;\n    }\n\n\n    setImageSmoothing(value: boolean) {\n        const ctx = this.getRenderingContext();\n\n        (ctx as any).msImageSmoothingEnabled = value;\n        (ctx as any).mozImageSmoothingEnabled = value;\n        (ctx as any).webkitImageSmoothingEnabled = value;\n        ctx.imageSmoothingEnabled = value;\n    }\n\n\n    getCanvas(): HTMLCanvasElement {\n        return this.#canvas;\n    }\n\n\n    setMatrixToTransform(transform: Transform) {\n        this.resetMatrix();\n\n        const pxs = this.pixelScale;\n        const path: Transform[] = [];\n\n        let t: Transform = transform;\n        path.unshift(t);\n\n        while (t.hasParent()) {\n            t = t.getParent();\n            path.unshift(t);\n        }\n\n        path.forEach(t => {\n            this.#renderingContext.translate(t.position.x * pxs, t.position.y * pxs);\n            this.#renderingContext.rotate(t.rotation.radians);\n            this.#renderingContext.scale(t.scale.x, t.scale.y);\n        });\n    }\n\n\n    resetMatrix() {\n        this.#renderingContext.resetTransform();\n    }\n\n\n    static getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n}\n", "import { Numbers } from \"@templatone/utils\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IStyle } from \"./Style\";\n\n\nexport class Color implements IClonable<Color>, IStyle {\n\n    private _red: number = 0;\n    get red(): number { return this._red; }\n    set red(v: number) {\n        this._red = Numbers.limit(v, 0, 255);\n    }\n\n    private _green: number = 0;\n    get green(): number { return this._green; }\n    set green(v: number) {\n        this._green = Numbers.limit(v, 0, 255);\n    }\n\n    private _blue: number = 0;\n    get blue(): number { return this._blue; }\n    set blue(v: number) {\n        this._blue = Numbers.limit(v, 0, 255);\n    }\n\n    private _alpha: number = 1;\n    get alpha(): number { return this._alpha; }\n    set alpha(v: number) {\n        this._alpha = Numbers.limit(v, 0, 1);\n    }\n\n\n    constructor(r: number = 0, g: number = 0, b: number = 0, alpha: number = 1) {\n        this.red = r;\n        this.green = g;\n        this.blue = b;\n        this.alpha = alpha;\n    }\n\n\n    getRGBA(): IColorRGBA {\n        return {\n            red: this.red,\n            green: this.green,\n            blue: this.blue,\n            alpha: this.alpha\n        } as IColorRGBA;\n    }\n\n\n    getRGB(): IColorRGB {\n        return {\n            red: this.red,\n            green: this.green,\n            blue: this.blue,\n        } as IColorRGB;\n    }\n\n\n    getHSLA(): IColorHSLA {\n        return Color.convertRGBAtoHSLA(this.red, this.green, this.blue, this.alpha);\n    }\n\n\n    getHSL(): IColorHSL {\n        return Color.convertRGBtoHSL(this.red, this.green, this.blue);\n    }\n\n\n    getHue(): number {\n        const c = this.getHSL();\n        return c.hue;\n    }\n\n\n    getSaturation(): number {\n        const c = this.getHSL();\n        return c.saturation;\n    }\n\n\n    getLightness(): number {\n        const c = this.getHSL();\n        return c.lightness;\n    }\n\n\n    setRGBA(...values: EntryColorRGBAType): Color {\n        const entry = Color._parseEntryType_ColorRGBA(values);\n\n        this.red = entry.red;\n        this.green = entry.green;\n        this.blue = entry.blue;\n        this.alpha = entry.alpha;\n\n        return this;\n    }\n\n\n    setRGB(...values: EntryColorRGBType): Color {\n        const entry = Color._parseEntryType_ColorRGB(values);\n\n        this.red = entry.red;\n        this.green = entry.green;\n        this.blue = entry.blue;\n\n        return this;\n    }\n\n\n    setHSLA(...values: EntryColorHSLAType): Color {\n        const entry = Color._parseEntryType_ColorHSLA(values);\n        const data = Color.convertHSLAtoRGBA(entry.hue, entry.saturation, entry.lightness, entry.alpha);\n\n        this.red = data.red;\n        this.green = data.green;\n        this.blue = data.blue;\n        this.alpha = data.alpha;\n\n        return this;\n    }\n\n\n    setHSL(...values: EntryColorHSLType): Color {\n        const entry = Color._parseEntryType_ColorHSL(values);\n        const data = Color.convertHSLtoRGB(entry.hue, entry.saturation, entry.lightness);\n\n        this.red = data.red;\n        this.green = data.green;\n        this.blue = data.blue;\n\n        return this;\n    }\n\n\n    setHue(hue: number): void {\n        const c = this.getHSLA();\n        this.setHSLA(hue, c.saturation, c.lightness, c.alpha);\n    }\n\n\n    setSaturation(saturation: number): void {\n        const c = this.getHSLA();\n        this.setHSLA(c.hue, saturation, c.lightness, c.alpha);\n    }\n\n\n    setLightness(lightness: number): void {\n        const c = this.getHSLA();\n        this.setHSLA(c.hue, c.saturation, lightness, c.alpha);\n    }\n\n\n    getHex(): string {\n        return Color.convertRGBAtoHex(this.red, this.green, this.blue, this.alpha);\n    }\n\n\n    getCSSValue(): string {\n        if (this.alpha < 1) {\n            return `rgba(${this.red.toFixed(3)}, ${this.green.toFixed(3)}, ${this.blue.toFixed(3)}, ${this.alpha.toFixed(3)})`;\n        } else {\n            return this.getHex();\n        }\n    }\n\n\n    computeStyle(): string {\n        return Color.convertRGBAtoStyle(this);\n    }\n\n\n    /**\n     * Returns cloned Color object\n     * @returns Color\n     */\n    clone(): Color {\n        return new Color(this.red, this.green, this.blue, this.alpha);\n    }\n\n\n    /**\n     * Create new Color object \u2764\uFE0F\n     * @returns new Color\n     */\n    static get Red(): Color {\n        return new Color(255, 0, 0);\n    }\n\n\n    /**\n     * Create new Color object \uD83D\uDFE8\n     * @returns new Color\n     */\n    static get Yellow(): Color {\n        return new Color(255, 255, 0);\n    }\n\n\n    /**\n     * Create new Color object \uD83D\uDFE9\n     * @returns new Color\n     */\n    static get Green(): Color {\n        return new Color(0, 255, 0);\n    }\n\n\n    /**\n     * Create new Color object \uD83D\uDFE6\n     * @returns new Color\n     */\n    static get Blue(): Color {\n        return new Color(0, 0, 255);\n    }\n\n\n    /**\n     * Create new Color object \uD83D\uDFEA\n     * @returns new Color\n     */\n    static get Magenta(): Color {\n        return new Color(255, 0, 255);\n    }\n\n\n    /**\n     * Create new Color object \u2B1B\uFE0F\n     * @returns new Color\n     */\n    static get Black(): Color {\n        return new Color(0, 0, 0);\n    }\n\n\n    /**\n     * Create new Color object \u2B1C\uFE0F\n     * @returns new Color\n     */\n    static get White(): Color {\n        return new Color(255, 255, 255);\n    }\n\n\n    /**\n     * Create new Color object \uD83D\uDC00\n     * @returns new Color\n     */\n    static get Grey(): Color {\n        return new Color(127, 127, 127);\n    }\n\n\n    /**\n     * Create new Color object \uD83C\uDFC1\n     * @returns new Color\n     */\n    static get Transparent(): Color {\n        return new Color(0, 0, 0, 0);\n    }\n\n\n    /**\n     * Create new Color object from hexdec value\n     * @param value #RGB|#RRGGBB|#RRGGBBAA\n     * @returns new Color\n     */\n    static fromHex(value: string): Color {\n        value = value.trim();\n\n        if (value.substr(0, 1) == '#') {\n            value = value.substr(1);\n        }\n\n        let rr: string;\n        let gg: string;\n        let bb: string;\n        let aa: string | null = null;\n\n        if (value.length == 3) {\n            rr = value.substring(0, 1) + value.substring(0, 1);\n            gg = value.substring(1, 2) + value.substring(1, 2);\n            bb = value.substring(2, 3) + value.substring(2, 3);\n\n        } else if (value.length == 4) {\n            rr = value.substring(0, 1) + value.substring(0, 1);\n            gg = value.substring(1, 2) + value.substring(1, 2);\n            bb = value.substring(2, 3) + value.substring(2, 3);\n            aa = value.substring(3, 4) + value.substring(3, 4);\n\n        } else if (value.length == 6) {\n            rr = value.substring(0, 2);\n            gg = value.substring(2, 4);\n            bb = value.substring(4, 6);\n\n        } else if (value.length == 8) {\n            rr = value.substring(0, 2);\n            gg = value.substring(2, 4);\n            bb = value.substring(4, 6);\n            aa = value.substring(6, 8);\n\n        } else {\n            throw new Error(`Color #${value} is not valid hex color value.`);\n        }\n\n        const r = parseInt(rr, 16);\n        const g = parseInt(gg, 16);\n        const b = parseInt(bb, 16);\n        const a = aa ? parseInt(aa, 16) / 255 : 1;\n\n        return Color.fromRGBA(r, g, b, a);\n    }\n\n\n    /**\n     * Create new Color object from RGBA values\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDC99 Blue channel <0, 255>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns new Color\n     */\n    static fromRGBA(...values: EntryColorRGBAType): Color {\n        const entry = Color._parseEntryType_ColorRGBA(values);\n        const color = new Color(entry.red, entry.green, entry.blue, entry.alpha);\n\n        return color;\n    }\n\n\n    /**\n     * Create new Color object from RGB values\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDC99 Blue channel <0, 255>\n     * @returns new Color\n     */\n    static fromRGB(...values: EntryColorRGBType): Color {\n        const entry = Color._parseEntryType_ColorRGB(values);\n        const color = this.fromRGBA(entry.red, entry.green, entry.blue, 1);\n\n        return color;\n    }\n\n\n    /**\n     * Create new Color object from HSLA values\n     * @param h \uD83C\uDF08 Hue channel <0, 360)\n     * @param s \u262F\uFE0F Saturation channel <0, 100>\n     * @param l \u2600\uFE0F Lightness channel <0, 100>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns new Color\n     */\n    static fromHSLA(...values: EntryColorHSLAType): Color {\n        const entry = Color._parseEntryType_ColorHSLA(values);\n        const data = Color.convertHSLAtoRGBA(entry.hue, entry.saturation, entry.lightness, entry.alpha);\n\n        const color = new Color();\n        color.red = data.red;\n        color.green = data.green;\n        color.blue = data.blue;\n        color.alpha = data.alpha;\n\n        return color;\n    }\n\n\n    /**\n     * Create new Color object from HSL values\n     * @param h \uD83C\uDF08 Hue channel <0, 360)\n     * @param s \u262F\uFE0F Saturation channel <0, 100>\n     * @param l \u2600\uFE0F Lightness channel <0, 100>\n     * @returns new Color\n     */\n    static fromHSL(...values: EntryColorHSLType): Color {\n        const entry = Color._parseEntryType_ColorHSL(values);\n        const color = this.fromHSLA(entry.hue, entry.saturation, entry.lightness, 1);\n\n        return color;\n    }\n\n\n    /**\n     * Conver RGBA to HSLA\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns IColorHSLA\n     */\n    static convertRGBAtoHSLA = (...values: EntryColorRGBAType): IColorHSLA => {\n        const entry = Color._parseEntryType_ColorRGBA(values);\n        \n        let r = Numbers.limit(entry.red, 0, 255);\n        let g = Numbers.limit(entry.green, 0, 255);\n        let b = Numbers.limit(entry.blue, 0, 255);\n        let alpha = Numbers.limit(entry.alpha, 0, 1);\n\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        let cmin: number = Math.min(r, g, b),\n            cmax: number = Math.max(r, g, b),\n            delta: number = cmax - cmin,\n            h: number = 0,\n            s: number = 0,\n            l: number = 0;\n\n        if (delta == 0) h = 0;\n        else if (cmax == r) h = ((g - b) / delta) % 6;\n        else if (cmax == g) h = (b - r) / delta + 2;\n        else h = (r - g) / delta + 4;\n\n        h = Math.round(h * 60);\n\n        if (h < 0) h += 360;\n\n        l = (cmax + cmin) / 2;\n        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\n\n        s *= 100;\n        l *= 100;\n\n        return { hue: h, saturation: s, lightness: l, alpha }\n    }\n\n\n    /**\n     * Conver RGB to HSL\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @returns IColorHSL\n     */\n    // static convertRGBtoHSL = (r: number, g: number, b: number): IColorHSL => {\n    static convertRGBtoHSL = (...values: EntryColorRGBType): IColorHSL => {\n        const entry = Color._parseEntryType_ColorRGB(values);\n        const c = Color.convertRGBAtoHSLA(entry.red, entry.green, entry.blue, 1);\n\n        return {\n            hue: c.hue,\n            saturation: c.saturation,\n            lightness: c.lightness,\n        }\n    }\n\n\n    /**\n     * Convert HSLA to RGBA\n     * @param h \uD83C\uDF08 Hue channel <0, 360)\n     * @param s \u262F\uFE0F Saturation channel <0, 100>\n     * @param l \u2600\uFE0F Lightness channel <0, 100>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns IColorRGBA\n     */\n    static convertHSLAtoRGBA = (...values: EntryColorHSLAType): IColorRGBA => {\n        const entry = Color._parseEntryType_ColorHSLA(values);\n\n        let h = entry.hue;\n        let s = entry.saturation;\n        let l = entry.lightness;\n        let alpha = entry.alpha;\n\n        if (h > 0) while (h >= 360) h -= 360;\n        else if (h < 0) while (h < 0) h += 360;\n\n        s = Numbers.limit(s, 0, 100);\n        l = Numbers.limit(l, 0, 100);\n        alpha = Numbers.limit(alpha, 0, 1);\n\n        s /= 100;\n        l /= 100;\n\n        let c: number = (1 - Math.abs(2 * l - 1)) * s,\n            x: number = c * (1 - Math.abs((h / 60) % 2 - 1)),\n            m: number = l - c / 2,\n            r: number = 0,\n            g: number = 0,\n            b: number = 0;\n\n        if (0 <= h && h < 60) {\n            r = c;\n            g = x;\n            b = 0;\n\n        } else if (60 <= h && h < 120) {\n            r = x;\n            g = c;\n            b = 0;\n\n        } else if (120 <= h && h < 180) {\n            r = 0;\n            g = c;\n            b = x;\n\n        } else if (180 <= h && h < 240) {\n            r = 0;\n            g = x;\n            b = c;\n\n        } else if (240 <= h && h < 300) {\n            r = x;\n            g = 0;\n            b = c;\n\n        } else if (300 <= h && h < 360) {\n            r = c;\n            g = 0;\n            b = x;\n        }\n\n        r = (r + m) * 255;\n        g = (g + m) * 255;\n        b = (b + m) * 255;\n\n        return { red: r, green: g, blue: b, alpha }\n    }\n\n\n    /**\n     * Convert HSL to RGB\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @returns IColorRGB\n     */\n    static convertHSLtoRGB = (...values: EntryColorHSLType): IColorRGB => {\n        const entry = Color._parseEntryType_ColorHSL(values);\n        const c = Color.convertHSLAtoRGBA(entry.hue, entry.saturation, entry.lightness, 1);\n\n        return {\n            red: c.red,\n            green: c.green,\n            blue: c.blue,\n        }\n    }\n\n\n    /**\n     * Convert RGBA to Hex\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns string\n     */\n    static convertRGBAtoHex = (...values: EntryColorRGBAType): string => {\n        const entry = Color._parseEntryType_ColorRGBA(values);\n\n        const red = Math.round(entry.red).toString(16);\n        const green = Math.round(entry.green).toString(16);\n        const blue = Math.round(entry.blue).toString(16);\n        const alpha = Math.round(entry.alpha * 255).toString(16);\n\n        const builder: string[] = ['#',\n            red.length == 2 ? red : '0' + red,\n            green.length == 2 ? green : '0' + green,\n            blue.length == 2 ? blue : '0' + blue,\n        ];\n\n        if (entry.alpha < 1) {\n            builder.push(alpha.length == 2 ? alpha : '0' + alpha);\n        }\n\n        return builder.join('');\n    }\n\n\n    /**\n     * Convert RGB to Hex\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @returns string\n     */\n    static convertRGBtoHex = (...values: EntryColorRGBType): string => {\n        const entry = Color._parseEntryType_ColorRGB(values);\n\n        return Color.convertRGBAtoHex(entry.red, entry.green, entry.blue, 1);\n    }\n\n\n    /**\n     * Convert HSLA to Hex\n     * @param h \uD83C\uDF08 Hue channel <0, 360)\n     * @param s \u262F\uFE0F Saturation channel <0, 100>\n     * @param l \u2600\uFE0F Lightness channel <0, 100>\n     * @param alpha \uD83C\uDFC1 Alpha channel <0, 1>\n     * @returns string\n     */\n    static convertHSLAtoHex = (...values: EntryColorHSLAType): string => {\n        const entry = Color._parseEntryType_ColorHSLA(values);\n        const data = Color.convertHSLAtoRGBA(entry.hue, entry.saturation, entry.lightness, entry.alpha);\n\n        return Color.convertRGBAtoHex(data.red, data.green, data.blue, data.alpha);\n    }\n\n\n    /**\n     * Convert HSL to Hex\n     * @param r \u2764\uFE0F Red channel <0, 255>\n     * @param g \uD83D\uDC9A Green channel <0, 255>\n     * @param b \uD83D\uDFE6 Blue channel <0, 255>\n     * @returns string\n     */\n    static convertHSLtoHex = (...values: EntryColorHSLType): string => {\n        const entry = Color._parseEntryType_ColorHSL(values);\n        const data = Color.convertHSLtoRGB(entry.hue, entry.saturation, entry.lightness);\n\n        return Color.convertRGBtoHex(data.red, data.green, data.blue);\n    }\n\n\n    static convertRGBAtoStyle = (...values: EntryColorRGBAType): string => {\n        const entry = Color._parseEntryType_ColorRGBA(values);\n\n        return `rgba(${entry.red.toFixed(3)}, ${entry.green.toFixed(3)}, ${entry.blue.toFixed(3)}, ${entry.alpha.toFixed(3)})`;\n    }\n\n\n    private static _parseEntryType_ColorRGBA(values: EntryColorRGBAType): IColorRGBA {\n        if (values.length == 4) {\n            return {\n                red: values[0],\n                green: values[1],\n                blue: values[2],\n                alpha: values[3],\n            };\n        } else {\n            return values[0];\n        }\n    }\n\n\n    private static _parseEntryType_ColorRGB(values: EntryColorRGBType): IColorRGB {\n        if (values.length == 3) {\n            return {\n                red: values[0],\n                green: values[1],\n                blue: values[2],\n            };\n        } else {\n            return values[0];\n        }\n    }\n\n\n    private static _parseEntryType_ColorHSLA(values: EntryColorHSLAType): IColorHSLA {\n        if (values.length == 4) {\n            return {\n                hue: values[0],\n                saturation: values[1],\n                lightness: values[2],\n                alpha: values[3],\n            };\n        } else {\n            return values[0];\n        }\n    }\n\n\n    private static _parseEntryType_ColorHSL(values: EntryColorHSLType): IColorHSL {\n        if (values.length == 3) {\n            return {\n                hue: values[0],\n                saturation: values[1],\n                lightness: values[2],\n            };\n        } else {\n            return values[0];\n        }\n    }\n}\n\n\nexport interface IColorRGB {\n    red: number,\n    green: number,\n    blue: number,\n}\n\n\nexport interface IColorRGBA extends IColorRGB {\n    alpha: number,\n}\n\n\nexport interface IColorHSL {\n    hue: number,\n    saturation: number,\n    lightness: number,\n}\n\n\nexport interface IColorHSLA extends IColorHSL {\n    alpha: number,\n}\n\n\nexport type EntryColorRGBAType =\n    | [red: number, green: number, blue: number, alpha: number]\n    | [color: IColorRGBA];\n\n\nexport type EntryColorRGBType =\n    | [red: number, green: number, blue: number]\n    | [color: IColorRGB];\n\n\nexport type EntryColorHSLAType =\n    | [hue: number, saturation: number, lightness: number, alpha: number]\n    | [color: IColorHSLA];\n\n\nexport type EntryColorHSLType =\n    | [hue: number, saturation: number, lightness: number]\n    | [color: IColorHSL];", "import { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport interface IStyle {\n    computeStyle: {\n        (renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): string | CanvasGradient | CanvasPattern\n    }\n}\n\n\nexport class Style implements IStyle, IClonable<Style> {\n\n    private _style: IStyle;\n\n\n    constructor(style: EntryStyleType) {\n        this._style = Style._parseEntryType_Style(style);\n    }\n\n\n    computeStyle(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): string | CanvasGradient | CanvasPattern {\n        const v = this._style.computeStyle(renderingLayer, boundingBox);\n        return v;\n    }\n\n\n    setStyle(style: EntryStyleType) {\n        this._style = Style._parseEntryType_Style(style);\n    }\n\n\n    getStyle() {\n        return this._style;\n    }\n\n\n    clone(): Style {\n        const thisStyle = this._style as any;\n        const style = thisStyle.hasOwnProperty('clone') ? thisStyle.clone() : { ...this._style };\n\n        return new Style(style);\n    }\n\n\n    private static _parseEntryType_Style(raw: EntryStyleType): IStyle {\n        const style = raw;\n\n        if (typeof style === 'object' && typeof (style as IStyle).computeStyle === 'function') {\n            return style as IStyle;\n        } else {\n            return {\n                computeStyle: (renderingLayer: IRenderingLayer, boundingBox: IBoundingBox) => {\n                    return style as string | CanvasGradient | CanvasPattern;\n                }\n            }\n        }\n    }\n}\n\n\nexport type EntryStyleType =\n    | IStyle\n    | string\n    | CanvasGradient\n    | CanvasPattern;", "import { Color } from \"../styles/Color\";\nimport { Style, EntryStyleType } from \"../styles/Style\";\nimport { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class Fill extends Style implements IClonable<Fill> {\n\n    constructor(style: EntryStyleType = Color.Grey) {\n        super(style);\n    }\n\n\n    apply(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): void {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.fillStyle = this.computeStyle(renderingLayer, boundingBox);\n    }\n\n\n    clone(): Fill {\n        const style = super.clone();\n\n        return new Fill(style);\n    }\n\n\n    static clear(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.fillStyle = 'transparent';\n    }\n}", "import { type IClonable } from \"../core/IClonable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class Font implements IClonable<Font> {\n\n    family: string;\n    size: number;\n    weight: number = 400;\n    italic: boolean = false;\n    lineHeight: number;\n    letterSpacing: number = 0;\n    features: FontFeatures[] = [];\n    align: CanvasTextAlign = \"left\";\n    baseline: CanvasTextBaseline = \"alphabetic\";\n\n\n    constructor(size: number = 12, family: string = 'sans-serif') {\n        this.size = size;\n        this.lineHeight = this.size * 1.5;\n\n        this.family = family;\n    }\n\n\n    apply(renderingLayer: IRenderingLayer): void {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const canvas = renderingLayer.getCanvas();\n        canvas.style.letterSpacing = `${this.letterSpacing}em`;\n        canvas.style.fontFeatureSettings = this.features.length > 0 ? this.features.map(f => `\"${f}\"`).join(', ') : 'initial';\n\n        const fontSize = this.size * pxs;\n\n        const font: string = [\n            this.weight.toFixed(0),\n            `${fontSize.toFixed(0)}px`,\n            this.italic ? 'italic' : '',\n            this.family,\n        ].join(' ');\n\n        ctx.font = font;\n        ctx.textAlign = this.align;\n    }\n\n\n    clone(): Font {\n        const f = new Font();\n\n        f.size = this.size;\n        f.family = this.family;\n        f.size = this.size;\n        f.weight = this.weight;\n        f.italic = this.italic;\n        f.lineHeight = this.lineHeight;\n        f.letterSpacing = this.letterSpacing;\n        f.features = this.features;\n        f.align = this.align;\n        f.baseline = this.baseline;\n\n        return f;\n    }\n\n\n    static clear(renderingLayer: IRenderingLayer) {\n        const canvas = renderingLayer.getCanvas();\n        canvas.style.letterSpacing = `0em`;\n        canvas.style.fontFeatureSettings = 'initial';\n\n        const ctx = renderingLayer.getRenderingContext();\n        ctx.font = \"10px sans-serif\";\n    }\n\n}\n\n\nexport const enum FontFeatures {\n    StandardLigatures = 'liga',\n    ContextualAlternates = 'calt',\n    DiscretionaryLigatures = 'dlig',\n    SmallSaps = 'smcp',\n    CapitalsToSmallCaps = 'c2sc',\n    Swashes = 'swsh',\n    StylisticAlternates = 'salt',\n    LiningFigures = 'lnum',\n    OldstyleFigures = 'onum',\n    ProportionalFigures = 'pnum',\n    TabularFigures = 'tnum',\n    Fractions = 'frac',\n    Ordinals = 'ordn',\n    // StylisticSets = 'ss##', // TODO: Vy\u0159e\u0161it stylistick\u00E9 sady\n    ProportionalWidths = 'pwid',\n    ProportionalAlternateWidths = 'palt',\n    ProportionalKana = 'pkna',\n    FullWidths = 'fwid',\n    HalfWidths = 'hwid',\n    AlternateHalfWidths = 'halt',\n    ThirdWidths = 'twid',\n    QuarterWidths = 'qwid',\n    JIS78Forms = 'jp78',\n    JIS83Forms = 'jp83',\n    JIS90Forms = 'jp90',\n    JIS2004Forms = 'jp04',\n    TraditionalForms = 'trad',\n    RubyNotationForms = 'ruby',\n    HorizontalKanaAlternates = 'hkna',\n    NLCKanjiForms = 'nlck',\n    AlternateAnnotationForms = 'nalt',\n    Italics = 'ital',\n    VerticalKerning = 'vkrn',\n    VerticalAlternates = 'vert',\n    ProportionalAlternateVerticalMetrics = 'vpal',\n    AlternateVerticalHalfMetrics = 'vhal',\n    VerticalKanaAlternates = 'vkna',\n    Kerning = 'kern',\n    GlyphComposition = 'ccmp',\n    LocalizedForms = 'locl',\n    Superscript = 'sups',\n    Subscript = 'subs',\n}", "import { Color } from \"../styles/Color\";\nimport { Style, EntryStyleType } from \"../styles/Style\";\nimport { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class Stroke extends Style implements IClonable<Stroke> {\n\n    lineWidth: number;\n    lineJoin: CanvasLineJoin;\n    lineCap: CanvasLineCap;\n    lineDashOffset: number;\n    miterLimit: number;\n\n\n    constructor(style: EntryStyleType = Color.Black, lineWidth: number = 1, lineJoin: CanvasLineJoin = 'miter', lineCap: CanvasLineCap = 'square', lineDashOffset: number = 0, miterLimit = 10) {\n        super(style);\n\n        this.lineWidth = lineWidth;\n        this.lineJoin = lineJoin;\n        this.lineCap = lineCap;\n        this.lineDashOffset = lineDashOffset;\n        this.miterLimit = miterLimit;\n    }\n\n\n    apply(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): void {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        ctx.lineWidth = this.lineWidth * pxs;\n        ctx.lineDashOffset = this.lineDashOffset * pxs;\n        ctx.lineJoin = this.lineJoin;\n        ctx.lineCap = this.lineCap;\n        ctx.miterLimit = this.miterLimit * pxs;\n\n        ctx.strokeStyle = this.computeStyle(renderingLayer, boundingBox);\n    }\n\n\n    clone(): Stroke {\n        const style = super.clone();\n\n        return new Stroke(style, this.lineWidth, this.lineJoin, this.lineCap, this.lineDashOffset, this.miterLimit);\n    }\n\n\n    static clear(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.lineWidth = 0;\n        ctx.lineJoin = 'round';\n        ctx.lineCap = 'round';\n        ctx.lineDashOffset = 0;\n        ctx.miterLimit = 10;\n\n        ctx.strokeStyle = 'transparent';\n    }\n}", "import { Vector } from \"./Vector\";\nimport { type IClonable } from \"../core/IClonable\";\n\n\nexport class Angle implements IClonable<Angle> {\n\n    degrees: number = 0;\n\n    get revolutions(): number {\n        return Angle.degreesToRevelutions(this.degrees);\n    }\n    set revolutions(revolutions: number) {\n        this.degrees = Angle.revelutionsToDegress(revolutions);\n    }\n\n\n    get radians(): number {\n        return Angle.degreesToRadians(this.degrees);\n    }\n    set radians(radians: number) {\n        this.degrees = Angle.radiansToDegress(radians);\n    }\n\n\n    constructor(...values: EntryAngleType) {\n        this.set(...values);\n    }\n\n\n    set(...values: EntryAngleType): Angle {\n        const degrees = this.#parseEntry(values);\n        this.degrees = degrees;\n\n        return this;\n    }\n\n\n    /**\n     * Add to angle\n     * @param value Angle or number (degrees)\n     * @returns Same Angle object.\n     */\n    add(...values: EntryAngleType): Angle {\n        const degrees = this.#parseEntry(values);\n        this.degrees += degrees;\n\n        return this;\n    }\n\n\n    /**\n     * Subtract of angle\n     * @param value Angle or number (degrees)\n     * @returns Same Angle object.\n     */\n    subtract(...values: EntryAngleType): Angle {\n        const degrees = this.#parseEntry(values);\n        this.degrees -= degrees;\n\n        return this;\n    }\n\n    /**\n     * Multiply the angle\n     * @param value Angle or number (degrees)\n     * @returns Same Angle object.\n     */\n    multiply(...values: EntryAngleType): Angle {\n        const degrees = this.#parseEntry(values);\n        this.degrees *= degrees;\n\n        return this;\n    }\n\n\n    /**\n     * Divide the angle\n     * @param value Angle or number (degrees)\n     * @returns Same Angle object.\n     */\n    divide(...values: EntryAngleType): Angle {\n        const degrees = this.#parseEntry(values);\n        this.degrees /= degrees;\n\n        return this;\n    }\n\n\n    normalize(): Angle {\n        if (this.degrees > 0) {\n            while (this.degrees > 360) this.degrees -= 360;\n        } else {\n            while (this.degrees < 0) this.degrees += 360;\n        }\n\n        return this;\n    }\n\n\n    getVector(): Vector {\n        const angle = this.clone();\n        angle.normalize();\n\n        const radians = angle.radians;\n\n        return new Vector(Math.cos(radians), Math.sin(radians));\n    }\n\n\n    getCSSValue(): string {\n        return `${this.degrees.toFixed(3)}deg`;\n    }\n\n\n    clone(): Angle {\n        return new Angle(this.degrees);\n    }\n\n\n    #parseEntry(entry: EntryAngleType): number {\n        const [value, unit] = entry;\n\n        if (value instanceof Angle) {\n            return value.degrees;\n        } else {\n            switch (unit) {\n                case \"radians\":\n                    return Angle.radiansToDegress(value);\n\n                case \"revolutions\":\n                    return Angle.revelutionsToDegress(value);\n\n                case \"degrees\":\n                    return value;\n\n                default:\n                    return value;\n            }\n        }\n    }\n\n\n    static fromDegrees(degrees: number): Angle {\n        return new Angle(degrees);\n    }\n\n\n    static fromRadians(radians: number): Angle {\n        const angle = new Angle(0)\n        angle.radians = radians;\n\n        return angle;\n    }\n\n\n    static fromRevolutions(revolutions: number): Angle {\n        const angle = new Angle(0)\n        angle.revolutions = revolutions;\n\n        return angle;\n    }\n\n\n    static get Zero(): Angle {\n        return Angle.fromDegrees(0);\n    }\n\n\n    static get Quarter(): Angle {\n        return Angle.fromDegrees(90);\n    }\n\n\n    static get Third(): Angle {\n        return Angle.fromDegrees(120);\n    }\n\n\n    static get Half(): Angle {\n        return Angle.fromDegrees(180);\n    }\n\n\n    static get Full(): Angle {\n        return Angle.fromDegrees(360);\n    }\n\n\n    /**\n     * Convert degrees to radians\n     * @param degrees \n     */\n    static degreesToRadians(degrees: number): number {\n        return (degrees / 180) * Math.PI;\n    }\n\n    /**\n     * Convert radians to degrees\n     * @param radians \n     */\n    static radiansToDegress(radians: number): number {\n        return (radians / Math.PI) * 180;\n    }\n\n    /**\n     * Convert degrees to revolutions\n     * @param degrees \n     */\n    static degreesToRevelutions(degrees: number): number {\n        return degrees / 360;\n    }\n\n    /**\n     * Convert revolutions to degrees\n     * @param revolutions \n     */\n    static revelutionsToDegress(revolutions: number): number {\n        return revolutions * 360;\n    }\n\n    /**\n     * Convert radians to revolutions\n     * @param radians \n     */\n    static radiansToRevelutions(radians: number): number {\n        return radians / (2 * Math.PI);\n    }\n\n    /**\n     * Convert revolutions to radians\n     * @param revolutions \n     */\n    static revelutionsToRadians(revolutions: number): number {\n        return revolutions * (2 * Math.PI);\n    }\n}\n\n\nexport type EntryAngleType =\n    | [degrees: number]\n    | [degrees: number, unit: \"degrees\"]\n    | [radians: number, unit: \"radians\"]\n    | [revolutions: number, unit: \"revolutions\"]\n    | [angle: Angle];\n\n\n\nexport function degrees(template: TemplateStringsArray, ...params: unknown[]) {\n    const s = String.raw(template, ...params).trim();\n    return Angle.fromDegrees(parseFloat(s));\n}\n\n\nexport function radians(template: TemplateStringsArray, ...params: unknown[]) {\n    const s = String.raw(template, ...params).trim();\n    return Angle.fromRadians(parseFloat(s));\n}\n\n\nexport function revolutions(template: TemplateStringsArray, ...params: unknown[]) {\n    const s = String.raw(template, ...params).trim();\n    return Angle.fromRevolutions(parseFloat(s));\n}\n", "import { Angle, EntryAngleType } from \"./Angle\";\nimport { type IClonable } from \"../core/IClonable\";\n\n\nexport interface IVector {\n    x: number,\n    y: number,\n}\n\n\nexport class Vector implements IVector, IClonable<Vector> {\n    x: number = 0;\n    y: number = 0;\n\n    get length(): number {\n        return Math.sqrt(this.x ** 2 + this.y ** 2);\n    }\n\n\n    constructor(...values: EntryVectorType) {\n        this.set(...values);\n    }\n\n\n    set(...values: EntryVectorType): Vector {\n        const v = Vector._parseEntry_Vector(values);\n\n        this.x = v.x;\n        this.y = v.y;\n\n        return this;\n    }\n\n\n    add(...values: EntryVectorType): Vector {\n        const v = Vector._parseEntry_Vector(values);\n\n        this.x += v.x;\n        this.y += v.y;\n\n        return this;\n    }\n\n\n    subtract(...values: EntryVectorType): Vector {\n        const v = Vector._parseEntry_Vector(values);\n\n        this.x -= v.x;\n        this.y -= v.y;\n\n        return this;\n    }\n\n\n    multiple(...values: EntryVectorModifierType): Vector {\n        const v = Vector._parseEntryType_VectorModifier(values);\n\n        this.x *= v.x;\n        this.y *= v.y;\n\n        return this;\n    }\n\n\n    divide(...values: EntryVectorModifierType): Vector {\n        const v = Vector._parseEntryType_VectorModifier(values);\n\n        this.x /= v.x;\n        this.y /= v.y;\n\n        return this;\n    }\n\n\n    rotate(...values: EntryAngleType): Vector {\n        const value = values[0];\n\n        let degrees: number;\n        if (value instanceof Angle) {\n            degrees = value.degrees;\n        } else {\n            degrees = value;\n        }\n\n        const length = this.length;\n        const angle = this.getAngle().add(degrees);\n\n        const vector = angle.getVector().multiple(length);\n\n        this.x = vector.x;\n        this.y = vector.y;\n\n        return this;\n    }\n\n\n    /**\n     * Normalize the Vector to length equal 1.\n     * @returns Same Vector object.\n     */\n    normalize(): Vector {\n        const length = this.length;\n        if (length !== 0) {\n            this.x = this.x / length;\n            this.y = this.y / length;\n        }\n\n        return this;\n    }\n\n\n    /**\n     * TODO: Add description\n     * @returns Same Vector object.\n     */\n    absolute(): Vector {\n        this.x = Math.abs(this.x);\n        this.y = Math.abs(this.y);\n\n        return this;\n    }\n\n\n    /**\n     * TODO: Add description\n     */\n    isEquals(vector: Vector): boolean {\n        return this.x == vector.x && this.y == vector.y;\n    }\n\n\n    /**\n     * Convert the Vector to Angle\n     * @returns New instance of Angle\n     */\n    getAngle(): Angle {\n        return Angle.fromRadians(Math.atan2(this.y, this.x));\n    }\n\n\n    /**\n     * Clone the Vector without references\n     * @returns New instance of Vector\n     */\n    clone(): Vector {\n        return new Vector(this.x, this.y);\n    }\n\n\n    /**\n     * Alias for `new Vector(0, 0);`\n     * @returns New instance of Vector\n     */\n    static get Zero(): Vector {\n        return new Vector(0, 0);\n    }\n\n\n    /**\n     * Alias for `new Vector(.5, .5);`\n     * @returns New instance of Vector\n     */\n    static get Half(): Vector {\n        return new Vector(.5, .5);\n    }\n\n\n    /**\n     * Alias for `new Vector(1, 1);`\n     * @returns New instance of Vector\n     */\n    static get One(): Vector {\n        return new Vector(1, 1);\n    }\n\n\n    /**\n      * Alias for `new Vector(0, -1);`\n      * @returns New instance of Vector\n      */\n    static get Top(): Vector {\n        return new Vector(0, -1);\n    }\n\n\n    /**\n      * Alias for `new Vector(0, 1);`\n      * @returns New instance of Vector\n      */\n    static get Bottom(): Vector {\n        return new Vector(0, 1);\n    }\n\n\n    /**\n      * Alias for `new Vector(-1, 0);`\n      * @returns New instance of Vector\n      */\n    static get Left(): Vector {\n        return new Vector(-1, 0);\n    }\n\n\n    /**\n      * Alias for `new Vector(1, 0);`\n      * @returns New instance of Vector\n      */\n    static get right(): Vector {\n        return new Vector(1, 0);\n    }\n\n\n    static distance(vector1: IVector, vector2: IVector): number {\n        const a = vector1.x - vector2.x;\n        const b = vector1.y - vector2.y;\n\n        return Math.sqrt(a**2 + b**2);\n    }\n\n\n    private static _parseEntry_Vector(raw: EntryVectorType): IVector {\n        let x: number;\n        let y: number;\n\n        if (raw.length == 2) {\n            x = raw[0];\n            y = raw[1];\n        } else if (Array.isArray(raw[0])) {\n            x = raw[0][0];\n            y = raw[0][1];\n        } else {\n            x = raw[0].x;\n            y = raw[0].y;\n        }\n\n        return { x, y }\n    }\n\n\n    private static _parseEntryType_VectorModifier(raw: EntryVectorModifierType): IVector {\n        let x: number;\n        let y: number;\n\n        if (raw.length == 2) {\n            x = raw[0];\n            y = raw[1];\n        } else if (typeof raw[0] == 'number') {\n            x = raw[0];\n            y = raw[0];\n        } else if (Array.isArray(raw[0])) {\n            x = raw[0][0];\n            y = raw[0][1];\n        } else {\n            x = raw[0].x;\n            y = raw[0].y;\n        }\n\n        return { x, y }\n    }\n}\n\n\nexport type VectorType =\n    | [x: number, y: number]\n    | IVector;\n\n\ntype EntryVectorType =\n    | [x: number, y: number]\n    | [vector: VectorType];\n\n\nexport type EntryVectorModifierType =\n    | [...EntryVectorType]\n    | [scalar: number];\n", "import { type IColorRGBA, Color } from \"../styles/Color\";\nimport { Vector, type VectorType } from \"../units/Vector\";\nimport { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class Shadow implements IClonable<Shadow> {\n\n    color: IColorRGBA = Color.Black;\n    offset: Vector = Vector.Zero;\n    blur: number = 0;\n\n\n    constructor(color: IColorRGBA, offset: VectorType, blur: number) {\n        this.color = color;\n        this.offset = new Vector(offset);\n        this.blur = blur;\n    }\n\n\n    apply(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): void {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        ctx.shadowColor = Color.convertRGBAtoStyle(this.color);\n        ctx.shadowBlur = this.blur * pxs;\n        ctx.shadowOffsetX = this.offset.x * pxs;\n        ctx.shadowOffsetY = this.offset.y * pxs;\n    }\n\n\n    clone(): Shadow {\n        const thisColor = this.color as any;\n        const color = thisColor.hasOwnProperty('clone') ? thisColor.clone() : { ...this.color };\n\n        return new Shadow(color, this.offset.clone(), this.blur);\n    }\n\n\n    static clear(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.shadowBlur = 0;\n        ctx.shadowColor = 'transparent';\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n    }\n}", "import { Angle } from \"../units/Angle\";\nimport { Vector, type VectorType } from \"../units/Vector\";\nimport { type IClonable } from \"../core/IClonable\";\n\n\nexport class Transform implements IClonable<Transform> {\n\n    origin: Vector;\n    position: Vector;\n    scale: Vector;\n    rotation: Angle;\n\n    private _parent: Transform | null = null;\n\n\n    constructor(position: VectorType = Vector.Zero, scale: VectorType = Vector.One, rotation: Angle = Angle.Zero, origin: VectorType = Vector.Zero) {\n        this.position = new Vector(position);\n        this.scale = new Vector(scale);\n        this.rotation = rotation;\n        this.origin = new Vector(origin);\n    }\n\n\n    getComputed(): Transform {\n        const transforms: Transform[] = (() => {\n            const fce = (arr: Transform[], t: Transform): Transform[] => {\n                arr.unshift(t);\n\n                if (t.hasParent()) return fce(arr, t.getParent());\n                else return arr;\n            }\n\n            return fce([], this);\n        })();\n\n        const computed = new Transform();\n\n        for (let i = 0; i < transforms.length; i++) {\n            const current = transforms[i];\n\n            const position = current.position.clone()\n                .rotate(computed.rotation)\n                .multiple(computed.scale);\n            \n            computed.position.add(position);\n            computed.rotation.add(current.rotation);\n            computed.scale.multiple(current.scale);\n        }\n\n        return computed;\n    }\n\n\n    /**\n     * @param parent Transformace rodi\u010De\n     * @param updateLocals Pokud bude TRUE, zm\u011Bn\u00ED transformace tak, aby po parentov\u00E1n\u00ED opticky identick\u00E1\n     */\n    setParent(parent: Transform, updateLocals: boolean = false) {\n        const before = this.getComputed();\n\n        this._parent = parent;\n\n        if (updateLocals === true) {\n            const after = this.getComputed();\n\n            after.position.subtract(before.position);\n            after.rotation.subtract(before.rotation);\n            after.scale.subtract(before.scale);\n            \n            this.position.subtract(after.position);\n            this.rotation.subtract(after.rotation);\n            this.scale.subtract(after.scale);\n        }\n    }\n\n\n    clearParent(updateLocals: boolean = false) {\n        if (this._parent === null) return;\n\n        const before = this.getComputed();\n\n        this._parent = null;\n\n        if (updateLocals === true) {\n            const after = this.getComputed();\n\n            after.position.subtract(before.position);\n            after.rotation.subtract(before.rotation);\n            after.scale.subtract(before.scale);\n            \n            this.position.subtract(after.position);\n            this.rotation.subtract(after.rotation);\n            this.scale.subtract(after.scale);\n        }\n    }\n\n\n    hasParent(): boolean {\n        return this._parent !== null;\n    }\n\n\n    getParent(): Transform {\n        if (this._parent == null) {\n            throw new Error(\"Transform has no parent. You can test by method `.hasParent()`\");\n        }\n\n        return this._parent;\n    }\n\n\n    clone(): Transform {\n        const t = new Transform(this.position.clone(), this.scale.clone(), this.rotation.clone(), this.origin.clone());\n\n        if (this.hasParent()) t.setParent(t.getParent());\n\n        return t;\n    }\n\n}", "import { type IVector, Vector } from \"./Vector\";\nimport { type IClonable } from \"../core/IClonable\";\n\n\nexport class BezierPoint extends Vector implements IClonable<BezierPoint> {\n\n    startControl: Vector;\n    endControl: Vector;\n\n\n    constructor(position: IVector, startControl: IVector = Vector.Zero, endControl: IVector = Vector.Zero) {\n        super(position.x, position.y);\n\n        this.startControl = new Vector(startControl.x, startControl.y);\n        this.endControl = new Vector(endControl.x, endControl.y);\n    }\n\n\n    toVector(): Vector {\n        return new Vector(this.x, this.y);\n    }\n\n\n    clone(): BezierPoint {\n        const startControl = this.startControl.clone();\n        const endControl = this.endControl.clone();\n        return new BezierPoint({ x: this.x, y: this.y }, startControl, endControl);\n    }\n}", "import { Numbers } from \"@templatone/utils\";\nimport { RenderingLayer } from \"../core/RenderingLayer\";\nimport { type IRenderable } from \"../renderables/IRenderable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { Shadow, Transform } from \"../properties/mod\";\nimport { IBoundingBox, IObject, IVisible } from \"../renderables/mod\";\nimport { Vector } from \"../units/mod\";\nimport { Gizmo } from \"../debugger/Gizmo\";\n\n\nexport class Compositor implements IObject, IRenderable, IVisible {\n\n    readonly brendingLayer: RenderingLayer;\n    readonly baseLayer: RenderingLayer;\n    #resultLayer: RenderingLayer;\n\n    readonly operation: CompositeOperation;\n\n    readonly width: number;\n    readonly height: number;\n\n    transform: Transform = new Transform();\n\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(width: number, height: number, operation: CompositeOperation) {\n        this.width = width;\n        this.height = height;\n\n        const blendingCanvas = document.createElement('canvas');\n        const baseCanvas = document.createElement('canvas');\n        const resultCanvas = document.createElement('canvas');\n\n        this.brendingLayer = new RenderingLayer(blendingCanvas, this.width, this.height);\n        this.baseLayer = new RenderingLayer(baseCanvas, this.width, this.height);\n        this.#resultLayer = new RenderingLayer(resultCanvas, this.width, this.height);\n\n        this.operation = operation;\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return {\n            origin: this.transform.origin.clone(),\n            size: new Vector(this.width, this.height),\n        }\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        const matteCanvas = this.brendingLayer.getCanvas();\n        const sourceCanvas = this.baseLayer.getCanvas();\n        const resultCanvas = this.#resultLayer.getCanvas();\n\n        this.#resultLayer.clear();\n\n        const resultCtx = this.#resultLayer.getRenderingContext();\n        resultCtx.globalCompositeOperation = CompositeOperation.SourceOver;\n        resultCtx.drawImage(matteCanvas, 0, 0);\n\n        resultCtx.globalCompositeOperation = this.operation;\n        resultCtx.drawImage(sourceCanvas, 0, 0);\n\n        this.#render(renderingLayer, resultCanvas);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        // TODO: Add gizmo\n        // renderingLayer.setMatrixToTransform(this.transform);\n        // Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.mediaColor);\n        // renderingLayer.resetMatrix();\n    }\n\n\n    #render(renderingLayer: IRenderingLayer, source: CanvasImageSource) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        renderingLayer.setMatrixToTransform(t);\n\n        ctx.globalAlpha = Numbers.limit(this.opacity, 0, 1);\n\n        if (this.shadow) {\n            this.shadow.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n        } else {\n            Shadow.clear(renderingLayer);\n        }\n\n        ctx.moveTo(-t.origin.x * pxs, -t.origin.y * pxs);\n        ctx.drawImage(source, 0, 0, this.width * pxs, this.height * pxs);\n\n        renderingLayer.resetMatrix();\n\n        ctx.globalAlpha = 1;\n\n        if (renderingLayer.gizmoVisibility && this.renderGizmo) this.renderGizmo(renderingLayer);\n    }\n\n\n    clear() {\n        this.baseLayer.clear();\n        this.brendingLayer.clear();\n    }\n\n}\n\n\nexport const enum CompositeOperation {\n    Color = 'color',\n    ColorBurn = 'color-burn',\n    ColorDodge = 'color-dodge',\n    Copy = 'copy',\n    Darken = 'darken',\n    DestinationAtop = 'destination-atop',\n    DestinationIn = 'destination-in',\n    DestinationOut = 'destination-out',\n    DestinationOver = 'destination-over',\n    Difference = 'difference',\n    Exclusion = 'exclusion',\n    HardLight = 'hard-light',\n    Hue = 'hue',\n    Lighten = 'lighten',\n    Lighter = 'lighter',\n    Luminosity = 'luminosity',\n    Multiply = 'multiply',\n    Overlay = 'overlay',\n    Saturation = 'saturation',\n    Screen = 'screen',\n    SoftLight = 'soft-light',\n    SourceAtop = 'source-atop',\n    SourceIn = 'source-in',\n    SourceOut = 'source-out',\n    SourceOver = 'source-over',\n    XOR = 'xor',\n}\n\n\n// export const enum CompositeOperation {\n//     SourceOver = 'source-over',\n//     SourceAtop = 'source-atop',\n//     SourceIn = 'source-in',\n//     SourceOut = 'source-out',\n//     DestinationOver = 'destination-over',\n//     DestinationAtop = 'destination-atop',\n//     DestinationIn = 'destination-in',\n//     DestinationOut = 'destination-out',\n//     Lighter = 'lighter',\n//     Copy = 'copy',\n//     XOR = 'xor',\n// }", "import { Compositor, CompositeOperation } from \"./Compositor\";\n\n\nexport class TrackAlphaCompositor extends Compositor {\n    constructor(width: number, height: number, inverted: boolean = false) {\n        const operation = inverted ? CompositeOperation.SourceOut : CompositeOperation.SourceIn;\n        super(width, height, operation);\n    }\n}\n", "export interface ILoopUpdateCallback {\n    /**\n     * @param time Number of milliseconds elapsed.\n     * @param delta Time in milliseconds since the previous frame.\n     */\n    (time: number, delta: number): void\n}\n\n\nexport class Loop extends EventTarget {\n\n    private _time: number = 0;\n    get time(): number {\n        return this._time;\n    }\n\n    private _startTimestamp: number = 0;\n    private _previousTimestamp: number = 0;\n    private _updateCallbacks: ILoopUpdateCallback[] = [];\n    private _requestAnimationFrameId: number = NaN;\n\n\n    addUpdateCallback(callback: ILoopUpdateCallback) {\n        this._updateCallbacks.push(callback);\n    }\n\n\n    removeUpdateCallback(callback: ILoopUpdateCallback) {\n        const i = this._updateCallbacks.indexOf(callback);\n\n        if (i == -1) throw new Error(\"Callback not found.\");\n\n        this._updateCallbacks.splice(i, 1);\n    }\n\n\n    isRunning(): boolean {\n        return !isNaN(this._requestAnimationFrameId);\n    }\n\n\n    start() {\n        this._startTimestamp = Date.now();\n        this._previousTimestamp = Date.now();\n\n        this._requestAnimationFrameId = window.requestAnimationFrame(t => this._frame(t));\n\n        this.dispatchEvent(new StartLoopEvent());\n    }\n\n\n    stop() {\n        if (!this.isRunning()) return;\n\n        window.cancelAnimationFrame(this._requestAnimationFrameId);\n        this._requestAnimationFrameId = NaN;\n\n        this.dispatchEvent(new StartLoopEvent());\n    }\n\n\n    update(time: number, delta: number) {\n        this._updateCallbacks.forEach(callback => callback(time, delta));\n    }\n\n\n    private _frame(time: number) {\n        if (!this.isRunning()) return;\n\n        const delta = ((n: number) => n > 1 ? n : 1)(time - this._previousTimestamp);\n        this.update(this._time, delta);\n\n        this._previousTimestamp = time;\n        this._time += delta;\n\n        this._requestAnimationFrameId = window.requestAnimationFrame(t => this._frame(t));\n    }\n\n}\n\n\nexport class StartLoopEvent extends CustomEvent<{}> {\n    static arg: 'start';\n\n    constructor() {\n        super(StartLoopEvent.arg);\n    }\n}\n\n\nexport class StopLoopEvent extends CustomEvent<{}> {\n    static arg: 'stop';\n\n    constructor() {\n        super(StartLoopEvent.arg);\n    }\n}", "import { Loop } from \"../repeaters/Loop\";\nimport { RenderingLayer } from \"./RenderingLayer\";\n\n\nexport class Engine extends RenderingLayer {\n\n    readonly loop: Loop;\n\n\n    constructor(canvas: HTMLCanvasElement, width: number, height: number, pixelScale?: number, renderingSettings?: CanvasRenderingContext2DSettings) {\n        super(canvas, width, height, pixelScale, renderingSettings);\n\n        this.loop = new Loop();\n\n        // this.debuggerBar = new DebuggerBar(this);\n        // this.loop.addUpdateCallback((time: number, delta: number) => this.debuggerBar.update(time, delta));\n    }\n}\n", "import { Transform } from \"../../properties/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { type IGeometry } from \"./IGeometry\";\nimport { type IRenderingLayer } from \"../../core/mod\";\n\n\ntype DrawWithoutMatrixManipulationType = {\n    (ctx: CanvasRenderingContext2D, pxs: number, transform: Transform): void\n};\n\ntype GetBoundingBoxType = {\n    (transform: Transform): IBoundingBox\n}\n\n\nexport abstract class Geometry implements IGeometry {\n\n    transform: Transform = new Transform();\n\n    private _drawWithoutMatrixManipulation: DrawWithoutMatrixManipulationType;\n    private _getBoundingBox: GetBoundingBoxType;\n\n\n    constructor(draw: DrawWithoutMatrixManipulationType, getBoundingBox: GetBoundingBoxType) {\n        this._drawWithoutMatrixManipulation = draw;\n        this._getBoundingBox = getBoundingBox;\n    }\n\n\n    contructMatrix(renderingLayer: IRenderingLayer) {\n        const t = this.transform;\n\n        renderingLayer.setMatrixToTransform(t);\n    }\n\n\n    destructMatrix(renderingLayer: IRenderingLayer) {\n        renderingLayer.resetMatrix();\n    }\n\n\n    drawWithoutMatrixManipulation(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        this._drawWithoutMatrixManipulation(ctx, pxs, t);\n    }\n\n\n    draw(renderingLayer: IRenderingLayer) {\n        this.contructMatrix(renderingLayer);\n        this.drawWithoutMatrixManipulation(renderingLayer);\n        this.destructMatrix(renderingLayer);\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return this._getBoundingBox(this.transform);\n    }\n\n}", "import { type Transform } from \"../../properties/mod\";\nimport { Vector, type BezierPoint } from \"../../units/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { Geometry } from \"./Geometry\";\n\n\nexport class BezierGeometry extends Geometry {\n\n    points: BezierPoint[];\n\n\n    constructor(...points: BezierPoint[]) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            ctx.beginPath();\n\n            const point = points[points.length - 1];\n            const x = pxs * (-t.origin.x + point.x);\n            const y = pxs * (-t.origin.y + point.y);\n\n            ctx.moveTo(x, y);\n\n            for (let i = 0; i < points.length; i++) {\n                const point1 = i > 0 ? points[i - 1] : points[points.length - 1];\n                const point2 = points[i];\n\n                const cp1x = point1.x + point1.endControl.x;\n                const cp1y = point1.y + point1.endControl.y;\n                const cp2x = point2.x + point2.startControl.x;\n                const cp2y = point2.y + point2.startControl.y;\n                const x = point2.x;\n                const y = point2.y;\n\n                ctx.bezierCurveTo(\n                    pxs * (-t.origin.x + cp1x),\n                    pxs * (-t.origin.x + cp1y),\n                    pxs * (-t.origin.x + cp2x),\n                    pxs * (-t.origin.x + cp2y),\n                    pxs * (-t.origin.x + x),\n                    pxs * (-t.origin.x + y),\n                );\n            }\n\n            ctx.closePath();\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            const min: Vector = Vector.Zero;\n            const max: Vector = Vector.Zero;\n\n            points.forEach(p => {\n                min.x = Math.min(min.x, p.x);\n                min.y = Math.min(min.y, p.y);\n                max.x = Math.max(max.x, p.x);\n                max.y = Math.max(max.y, p.y);\n            });\n\n            return {\n                origin: t.origin.clone().add(min),\n                size: max.subtract(min),\n            }\n        }\n\n        super(d, b);\n\n        this.points = points;\n    }\n}", "import { Vector } from \"../../units/mod\";\nimport { type Transform } from \"../../properties/mod\";\nimport { type IClonable } from \"../../core/mod\";\nimport { Geometry } from \"./Geometry\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\n\n\nexport class EllipseGeometry extends Geometry implements IClonable<EllipseGeometry> {\n\n    width: number;\n    height: number;\n\n    constructor(width: number, height: number) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            const width = (this.width > 0 ? this.width : 0);\n            const height = (this.height > 0 ? this.height : 0);\n\n            const x = -t.origin.x + width / 2;\n            const y = -t.origin.y + height / 2;\n\n            const radiusX = width / 2;\n            const radiusY = height / 2;\n\n            ctx.beginPath();\n            ctx.ellipse(\n                x * pxs,\n                y * pxs,\n                radiusX * pxs,\n                radiusY * pxs,\n                0, 0, 2 * Math.PI\n            );\n            ctx.closePath();\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            return {\n                origin: t.origin.clone(),\n                size: new Vector(this.width, this.height),\n            }\n        }\n\n        super(d, b);\n\n        this.width = width;\n        this.height = height;\n    }\n\n\n    clone(): EllipseGeometry {\n        return new EllipseGeometry(this.width, this.height);\n    }\n\n}", "import { Numbers } from \"@templatone/utils\";\nimport { type Transform } from \"../../properties/mod\";\nimport { Vector, type Angle } from \"../../units/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { Geometry } from \"./Geometry\";\n\n\nexport class PieGeometry extends Geometry {\n\n    width: number;\n    height: number;\n\n    startAngle: Angle;\n    endAngle: Angle;\n\n    innerRadius: number;\n\n    constructor(width: number, height: number, startAngle: Angle, endAngle: Angle, innerRadius: number) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            const width = this.width > 0 ? this.width : 0;\n            const height = this.height > 0 ? this.height : 0;\n\n            const x = -t.origin.x + width / 2;\n            const y = -t.origin.y + height / 2;\n\n            const radiusX = width / 2;\n            const radiusY = height / 2;\n\n            const innerRadius = Numbers.limit(this.innerRadius, 0, 1);\n\n            const innerRadiusX = radiusX * innerRadius;\n            const innerRadiusY = radiusY * innerRadius;\n\n            let startAngle = this.startAngle.radians - Math.PI / 2;\n            let endAngle = this.endAngle.radians - Math.PI / 2;\n\n            if (endAngle - startAngle > Math.PI * 2) {\n                endAngle = Math.PI * 2 + startAngle;\n            }\n\n            ctx.beginPath();\n            ctx.ellipse(\n                x * pxs,\n                y * pxs,\n                radiusX * pxs,\n                radiusY * pxs,\n                0, startAngle, endAngle\n            );\n            ctx.ellipse(\n                x * pxs,\n                y * pxs,\n                innerRadiusX * pxs,\n                innerRadiusY * pxs,\n                0, endAngle, startAngle, true\n            );\n            ctx.closePath();\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            return {\n                origin: t.origin.clone(),\n                size: new Vector(this.width, this.height),\n            }\n        }\n\n        super(d, b);\n\n        this.width = width;\n        this.height = height;\n\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n\n        this.innerRadius = innerRadius;\n    }\n}", "import { type IVector, Vector } from \"../../units/mod\";\nimport { type Transform } from \"../../properties/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { Geometry } from \"./Geometry\";\n\n\nexport class PolygonGeometry extends Geometry {\n\n\n    constructor(...points: IVector[]) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            ctx.beginPath();\n            \n            const p = points[0];\n            const x = -t.origin.x * pxs + p.x * pxs;\n            const y = -t.origin.y * pxs + p.y * pxs;\n\n            ctx.moveTo(x, y);\n\n            for (let i = 1; i < points.length; i++) {\n                const p = points[i];\n                const x = -t.origin.x * pxs + p.x * pxs;\n                const y = -t.origin.y * pxs + p.y * pxs;\n\n                ctx.lineTo(x, y);\n            }\n\n            ctx.closePath();\n        }\n\n\n        const b = (t: Transform): IBoundingBox => {\n            const min: Vector = Vector.Zero;\n            const max: Vector = Vector.Zero;\n\n            points.forEach(p => {\n                min.x = Math.min(min.x, p.x);\n                min.y = Math.min(min.y, p.y);\n                max.x = Math.max(max.x, p.x);\n                max.y = Math.max(max.y, p.y);\n            });\n    \n            return {\n                origin: t.origin.clone().add(min),\n                size: max.subtract(min),\n            }\n        }\n\n        super(d, b);\n    }\n}", "import { type IClonable } from \"../../core/mod\";\nimport { Vector } from \"../../units/mod\";\nimport { type Transform } from \"../../properties/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { Geometry } from \"./Geometry\";\n\n\nexport class RectangleGeometry extends Geometry implements IClonable<RectangleGeometry> {\n\n    width: number;\n    height: number;\n\n\n    constructor(width: number, height: number) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            const width = this.width > 0 ? this.width : 0;\n            const height = this.height > 0 ? this.height : 0;\n\n            ctx.beginPath();\n            ctx.rect(\n                -t.origin.x * pxs,\n                -t.origin.y * pxs,\n                width * pxs,\n                height * pxs\n            );\n            ctx.closePath();\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            return {\n                origin: t.origin.clone(),\n                size: new Vector(this.width, this.height),\n            }\n        }\n\n        super(d, b);\n\n        this.width = width;\n        this.height = height;\n    }\n\n\n    clone(): RectangleGeometry {\n        return new RectangleGeometry(this.width, this.height);\n    }\n\n}", "import { Numbers } from \"@templatone/utils\";\nimport { type IClonable } from \"../../core/mod\";\nimport { type IVector, Vector } from \"../../units/mod\";\nimport { type Transform } from \"../../properties/Transform\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { Geometry } from \"./Geometry\";\n\n\nexport type MultipleRadiusInitType =\n    | [radius: number | IVector]\n    | [radius: number | IVector]\n    | [topLeftBottomRightRadius: number | IVector, topRightBottomLeftRadius: number | IVector]\n    | [topLeftRadius: number | IVector, topRightBottomLeftRadius: number | IVector, bottomRightRadius: number | IVector]\n    | [topLeftRadius: number | IVector, topRightRadius: number | IVector, bottomRightRadius: number | IVector, bottomLeftRadius: number | IVector];\n\n\nexport type SingleRadiusInitType =\n    | [radius: number | IVector]\n    | [radiusX: number, radiusY: number];\n\n\nexport class RoundedRectangleGeometry extends Geometry implements IClonable<RoundedRectangleGeometry> {\n\n    width: number;\n    height: number;\n\n    topLeftRadius: Vector;\n    topRightRadius: Vector;\n    bottomLeftRadius: Vector;\n    bottomRightRadius: Vector;\n\n\n    constructor(width: number, height: number, ...radius: MultipleRadiusInitType) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, t: Transform) => {\n            const width = (this.width > 0 ? this.width : 0);\n            const height = (this.height > 0 ? this.height : 0);\n\n            const r1 = this.topLeftRadius.clone();\n            if (r1.x > 0 && r1.y > 0) {\n                r1.multiple(Numbers.limit(r1.x, 0, width / 2) / r1.x);\n                r1.multiple(Numbers.limit(r1.y, 0, height / 2) / r1.y);\n            }\n\n            const r2 = this.topRightRadius.clone();\n            if (r2.x > 0 && r2.y > 0) {\n                r2.multiple(Numbers.limit(r2.x, 0, width / 2) / r2.x);\n                r2.multiple(Numbers.limit(r2.y, 0, height / 2) / r2.y);\n            }\n\n            const r3 = this.bottomRightRadius.clone();\n            if (r3.x > 0 && r3.y > 0) {\n                r3.multiple(Numbers.limit(r3.x, 0, width / 2) / r3.x);\n                r3.multiple(Numbers.limit(r3.y, 0, height / 2) / r3.y);\n            }\n\n            const r4 = this.bottomLeftRadius.clone();\n            if (r4.x > 0 && r4.y > 0) {\n                r4.multiple(Numbers.limit(r4.x, 0, width / 2) / r4.x);\n                r4.multiple(Numbers.limit(r4.y, 0, height / 2) / r4.y);\n            }\n\n            ctx.translate(-t.origin.x * pxs, -t.origin.y * pxs);\n            ctx.beginPath();\n            ctx.moveTo(0, r1.y * pxs);\n\n            ctx.ellipse(\n                r1.x * pxs,\n                r1.y * pxs,\n                r1.x * pxs,\n                r1.y * pxs,\n                Math.PI, 0, Math.PI / 2\n            );\n            ctx.ellipse(\n                (width - r2.x) * pxs,\n                r2.y * pxs,\n                r2.y * pxs,\n                r2.x * pxs,\n                Math.PI * 1.5, 0, Math.PI / 2\n            );\n            ctx.ellipse(\n                (width - r3.x) * pxs,\n                (height - r3.y) * pxs,\n                r3.x * pxs,\n                r3.y * pxs,\n                Math.PI * 2, 0, Math.PI / 2\n            );\n            ctx.ellipse(\n                r4.x * pxs,\n                (height - r4.y) * pxs,\n                r4.y * pxs,\n                r4.x * pxs,\n                Math.PI * .5, 0, Math.PI / 2\n            );\n            ctx.closePath();\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            return {\n                origin: t.origin.clone(),\n                size: new Vector(this.width, this.height),\n            }\n        }\n\n        super(d, b);\n\n        this.width = width;\n        this.height = height;\n\n        this.topLeftRadius = Vector.Zero;\n        this.topRightRadius = Vector.Zero;\n        this.bottomLeftRadius = Vector.Zero;\n        this.bottomRightRadius = Vector.Zero;\n\n        this.setRadius(...radius);\n    }\n\n\n    setRadius(...radius: MultipleRadiusInitType) {\n        if (radius.length == 4) {\n            this.setTopLeftRadius(radius[0]);\n            this.setTopRightRadius(radius[1]);\n            this.setBottomRightRadius(radius[2]);\n            this.setBottomLeftRadius(radius[3]);\n\n        } else if (radius.length == 3) {\n            this.setTopLeftRadius(radius[0]);\n            this.setTopRightRadius(radius[1]);\n            this.setBottomRightRadius(radius[2]);\n            this.setBottomLeftRadius(radius[1]);\n\n        } else if (radius.length == 2) {\n            this.setTopLeftRadius(radius[0]);\n            this.setTopRightRadius(radius[1]);\n            this.setBottomRightRadius(radius[0]);\n            this.setBottomLeftRadius(radius[1]);\n\n        } else if (radius.length == 1) {\n            const v = radius[0];\n            this.setTopLeftRadius(radius[0]);\n            this.setTopRightRadius(radius[0]);\n            this.setBottomRightRadius(radius[0]);\n            this.setBottomLeftRadius(radius[0]);\n\n        } else {\n            throw new Error(\"Incorrect combination of agruments\");\n        }\n    }\n\n\n    setTopLeftRadius(...values: SingleRadiusInitType) {\n        const radius = RoundedRectangleGeometry._parseRadiusValue(...values);\n\n        this.topLeftRadius.x = radius.x;\n        this.topLeftRadius.y = radius.y;\n    }\n\n\n    setTopRightRadius(...values: SingleRadiusInitType) {\n        const radius = RoundedRectangleGeometry._parseRadiusValue(...values);\n\n        this.topRightRadius.x = radius.x;\n        this.topRightRadius.y = radius.y;\n    }\n\n\n    setBottomRightRadius(...values: SingleRadiusInitType) {\n        const radius = RoundedRectangleGeometry._parseRadiusValue(...values);\n\n        this.bottomRightRadius.x = radius.x;\n        this.bottomRightRadius.y = radius.y;\n    }\n\n\n    setBottomLeftRadius(...values: SingleRadiusInitType) {\n        const radius = RoundedRectangleGeometry._parseRadiusValue(...values);\n\n        this.bottomLeftRadius.x = radius.x;\n        this.bottomLeftRadius.y = radius.y;\n    }\n\n\n    private static _parseRadiusValue(...values: SingleRadiusInitType): IVector {\n        let x: number;\n        let y: number;\n\n        if (values.length == 2) {\n            x = values[0];\n            y = values[1];\n\n        } else if (typeof values[0] == 'number') {\n            x = values[0];\n            y = values[0];\n\n        } else {\n            x = values[0].x;\n            y = values[0].y;\n        }\n\n        return { x, y }\n    }\n\n\n    clone(): RoundedRectangleGeometry {\n        const topLeftRadius = { x: this.topLeftRadius.x, y: this.topLeftRadius.y };\n        const topRightRadius = { x: this.topRightRadius.x, y: this.topRightRadius.y };\n        const bottomRightRadius = { x: this.bottomRightRadius.x, y: this.bottomRightRadius.y };\n        const bottomLeftRadius = { x: this.bottomLeftRadius.x, y: this.bottomLeftRadius.y };\n\n        const geometry = new RoundedRectangleGeometry(this.width, this.height, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius);\n\n        return geometry;\n    }\n\n}", "import { Numbers } from \"@templatone/utils\";\nimport { Geometry } from \"./Geometry\";\nimport { type IVector, Vector } from \"../../units/mod\";\nimport { type IBoundingBox } from \"../IBoundingBox\";\nimport { type Transform } from \"../../properties/mod\";\n\n\nexport class TrimablePolygonGeometry extends Geometry {\n\n    points: IVector[];\n    closed: boolean;\n\n    trimEnd: number;\n    trimStart: number;\n    trimOffset: number;\n\n\n    constructor(points: IVector[], closed: boolean = true, trimStart: number = 0, trimEnd: number = 1, trimOffset: number = 0) {\n        const d = (ctx: CanvasRenderingContext2D, pxs: number, transform: Transform) => {\n            this._draw(ctx, pxs, transform);\n        }\n\n        const b = (t: Transform): IBoundingBox => {\n            const width = Math.max(...this.points.map(p => p.x))\n            const height = Math.max(...this.points.map(p => p.y))\n\n            return {\n                origin: this.transform.origin.clone(),\n                size: new Vector(width, height),\n            }\n        }\n\n        super(d, b);\n\n        this.points = points;\n        this.closed = closed;\n\n        this.trimEnd = trimEnd;\n        this.trimStart = trimStart;\n        this.trimOffset = trimOffset;\n    }\n\n\n    private _draw(ctx: CanvasRenderingContext2D, pxs: number, transform: Transform): void {\n        const trimOffsetNormalized = this.trimOffset + this.trimStart;\n        const trimStartNormalized = 0;\n        const trimEndNormalized = this.trimEnd - this.trimStart;\n\n        const trimOffsetRatio = ((v) => {\n            while (v < 0) v += 1;\n            while (v > 1) v -= 1;\n\n            return v;\n        })(trimOffsetNormalized);\n\n        const trimStartRatio = Numbers.limit(trimStartNormalized, 0, 1) + trimOffsetRatio;\n        const trimEndRatio = Numbers.limit(trimEndNormalized, 0, 1) + trimOffsetRatio;\n\n\n        const sides = this.points.map((start, i, arr) => {\n            const end = i + 1 < arr.length ? arr[i + 1] : arr[0];\n            const line = Vector.Zero.add(end).subtract(start);\n            return line;\n        }).slice(0, this.closed ? this.points.length : this.points.length - 1)\n\n\n        const circuit = sides.reduce((acc, side) => acc + side.length, 0);\n        const trimStartLength = trimStartRatio * circuit;\n        const trimEndLength = trimEndRatio * circuit;\n\n\n        let alreadyDrawn: number = 0;\n\n        ctx.translate(-transform.origin.x * pxs, -transform.origin.y * pxs);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n\n        sides.forEach(side => {\n            alreadyDrawn = this._drawSide(ctx, pxs, side, alreadyDrawn, trimStartLength, trimEndLength)\n        });\n\n\n        if (1 < trimEndRatio) {\n            if (!this.closed) {\n                const resetMovement: Vector = sides.reduce((acc, side) => {\n                    return acc.subtract(side)\n                }, Vector.Zero)\n\n                ctx.moveTo(resetMovement.x * pxs, resetMovement.y * pxs);\n                ctx.translate(resetMovement.x * pxs, resetMovement.y * pxs);\n            }\n\n            let overflowAlreadyDrawn: number = 0;\n            for (let i = 0; i < sides.length; i++) {\n                const side = sides[i];\n                overflowAlreadyDrawn = this._drawSide(ctx, pxs, side, overflowAlreadyDrawn, 0, (trimEndLength - circuit));\n\n                if (overflowAlreadyDrawn > trimEndLength - circuit) break;\n            }\n        }\n\n\n        if (this.closed && (trimStartRatio != trimEndRatio && trimStartRatio - trimEndRatio == 0)) {\n            ctx.closePath();\n        }\n    }\n\n\n    private _drawSide(ctx: CanvasRenderingContext2D, pxs: number, side: Vector, alreadyDrawn: number, trimStartLength: number, trimEndLength: number): number {\n        if (trimEndLength >= (alreadyDrawn + side.length) && trimStartLength <= alreadyDrawn) {\n            // FULL\n            ctx.lineTo(side.x * pxs, side.y * pxs);\n\n        } else if (trimEndLength >= (alreadyDrawn + side.length) && trimStartLength < (alreadyDrawn + side.length) && trimStartLength >= alreadyDrawn) {\n            // GAP BEFORE\n            const beforeGapModifier = (trimStartLength - alreadyDrawn) / side.length;\n\n            if (beforeGapModifier > 0) {\n                const v = side.clone().multiple(beforeGapModifier);\n                ctx.moveTo(v.x * pxs, v.y * pxs);\n            }\n\n            ctx.lineTo(side.x * pxs, side.y * pxs)\n\n        } else if (trimEndLength > alreadyDrawn && trimStartLength <= alreadyDrawn) {\n            // GAP AFTER\n\n            const afterLength = side.length - (trimEndLength - alreadyDrawn);\n            const lineLength = side.length - afterLength\n\n            const lineModifier = lineLength / side.length;\n            const v = side.clone().multiple(lineModifier);\n            ctx.lineTo(v.x * pxs, v.y * pxs);\n\n            if (afterLength > 0) {\n                const afterGapModifier = afterLength / side.length;\n                const v = side.clone().multiple(afterGapModifier);\n                ctx.moveTo(v.x * pxs, v.y * pxs);\n            }\n\n        } else if (trimEndLength > alreadyDrawn && trimStartLength < (alreadyDrawn + side.length) && trimStartLength > alreadyDrawn) {\n            // BETWEEN\n            const beforeLength = trimStartLength - alreadyDrawn;\n            const afterLength = side.length - (trimEndLength - alreadyDrawn);\n            const lineLength = side.length - (beforeLength + afterLength)\n\n            if (beforeLength > 0) {\n                const beforeGapModifier = beforeLength / side.length;\n                const v = side.clone().multiple(beforeGapModifier);\n                ctx.moveTo(v.x * pxs, v.y * pxs);\n            }\n\n            const lineModifier = (lineLength + beforeLength) / side.length;\n            const v = side.clone().multiple(lineModifier);\n            ctx.lineTo(v.x * pxs, v.y * pxs);\n\n            if (afterLength > 0) {\n                const afterGapModifier = afterLength / side.length;\n                const v = side.clone().multiple(afterGapModifier);\n                ctx.moveTo(v.x * pxs, v.y * pxs);\n            }\n\n        } else {\n            // NONE\n            ctx.moveTo(side.x * pxs, side.y * pxs);\n        }\n\n        ctx.translate(side.x * pxs, side.y * pxs);\n\n        return alreadyDrawn += side.length;\n    }\n}", "import { type IRenderingLayer } from \"../core/mod\";\nimport { type IVector } from \"../units/Vector\";\n\n\nexport class Gizmo {\n    static nullColor = \"white\";\n    static shapeColor = \"cyan\";\n    static mediaColor = \"magenta\";\n    static textColor = \"yellow\";\n\n    static origin(renderingLayer: IRenderingLayer, position: IVector, color: string = \"#000\") {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const scale = renderingLayer.gizmoScale;\n\n        const fillStyle = ctx.fillStyle;\n\n        const crossLineWidth = 16 * scale;\n        const crossLineHeight = 2 * scale;\n\n        const dotSize = 4 * scale;\n\n        ctx.beginPath();\n        ctx.rect(\n            -(crossLineWidth / 2 + 1) * pxs,\n            -(crossLineHeight / 2 + 1) * pxs,\n            (crossLineWidth + 2) * pxs,\n            (crossLineHeight + 2) * pxs\n        );\n        ctx.rect(\n            -(crossLineHeight / 2 + 1) * pxs,\n            -(crossLineWidth / 2 + 1) * pxs,\n            (crossLineHeight + 2) * pxs,\n            (crossLineWidth + 2) * pxs\n        );\n        ctx.rect(\n            -(dotSize / 2 + crossLineHeight + 1) * pxs,\n            -(dotSize / 2 + crossLineHeight + 1) * pxs,\n            (dotSize + crossLineHeight * 2 + 2) * pxs,\n            (dotSize + crossLineHeight * 2 + 2) * pxs\n        );\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(255, 255, 255, .6)';\n        ctx.fill();\n\n        ctx.beginPath();\n        ctx.rect(\n            (-crossLineWidth / 2) * pxs,\n            (-crossLineHeight / 2) * pxs,\n            crossLineWidth * pxs,\n            crossLineHeight * pxs\n        );\n        ctx.rect(\n            (-crossLineHeight / 2) * pxs,\n            (-crossLineWidth / 2) * pxs,\n            crossLineHeight * pxs,\n            crossLineWidth * pxs,\n        );\n        ctx.rect(\n            -(dotSize / 2 + crossLineHeight) * pxs,\n            -(dotSize / 2 + crossLineHeight) * pxs,\n            (dotSize + crossLineHeight * 2) * pxs,\n            (dotSize + crossLineHeight * 2) * pxs\n        );\n        ctx.closePath();\n        ctx.fillStyle = '#222';\n        ctx.fill();\n\n        ctx.fillStyle = color;\n        ctx.fillRect(\n            (-dotSize / 2) * pxs,\n            (-dotSize / 2) * pxs,\n            dotSize * pxs,\n            dotSize * pxs\n        );\n\n        ctx.fillStyle = fillStyle;\n    }\n}", "import { Fill } from \"../../properties/Fill\";\nimport { Gizmo } from \"../../debugger/Gizmo\";\nimport { Numbers } from \"@templatone/utils\";\nimport { Shadow } from \"../../properties/Shadow\";\nimport { Stroke } from \"../../properties/Stroke\";\nimport { Transform } from \"../../properties/Transform\";\nimport { Vector } from \"../../units/Vector\";\nimport { type GetBoundingBoxCallbackType, IShape } from \"./IShape\";\nimport { type IGeometry } from \"../geometries/IGeometry\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\n\n\nexport class Shape {\n\n    geometry: IGeometry;\n    private _getBoundingBox: GetBoundingBoxCallbackType;\n\n    transform: Transform = new Transform();\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n\n    constructor(geometry: IGeometry, getBoundingBox: GetBoundingBoxCallbackType) {\n        this.geometry = geometry;\n        this._getBoundingBox = getBoundingBox;\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this.geometry, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this.geometry);\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer) {\n        return this._getBoundingBox(renderingLayer)\n    }\n\n\n    static applyStyles(renderingLayer: IRenderingLayer, shape: IShape): void {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.globalAlpha = Numbers.limit(shape.opacity, 0, 1);\n\n        if (shape.shadow) {\n            shape.shadow.apply(renderingLayer, shape.getBoundingBox(renderingLayer));\n        } else {\n            Shadow.clear(renderingLayer);\n        }\n\n        if (shape.fill) {\n            shape.fill.apply(renderingLayer, shape.getBoundingBox(renderingLayer));\n            ctx.fill();\n        } else {\n            Fill.clear(renderingLayer);\n        }\n\n        if (shape.stroke) {\n            shape.stroke.apply(renderingLayer, shape.getBoundingBox(renderingLayer));\n            ctx.stroke();\n        } else {\n            Stroke.clear(renderingLayer);\n        }\n\n        ctx.globalAlpha = 1;\n    }\n\n\n    static renderObject(renderingLayer: IRenderingLayer, geometry: IGeometry, renderable: IRenderable, shape: IShape): void {\n        const ctx = renderingLayer.getRenderingContext();\n\n        ctx.beginPath();\n        geometry.contructMatrix(renderingLayer);\n        geometry.drawWithoutMatrixManipulation(renderingLayer);\n\n        Shape.applyStyles(renderingLayer, shape);\n\n        geometry.destructMatrix(renderingLayer);\n        ctx.closePath();\n\n        if (renderingLayer.gizmoVisibility && renderable.renderGizmo) renderable.renderGizmo(renderingLayer);\n    }\n\n\n    static renderGizmo(renderingLayer: IRenderingLayer, geometry: IGeometry) {\n        renderingLayer.setMatrixToTransform(geometry.transform);\n\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.shapeColor);\n\n        renderingLayer.resetMatrix();\n    }\n\n}", "import { BezierGeometry } from \"../geometries/BezierGeometry\";\nimport { Shape } from \"./Shape\";\nimport { type BezierPoint } from \"../../units/BezierPoint\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class BezierShape extends BezierGeometry implements IRenderable, IShape {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n    constructor(...points: BezierPoint[]) {\n        super(...points);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n}", "import { EllipseGeometry } from \"../geometries/EllipseGeometry\";\nimport { Shape } from \"./Shape\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IClonable } from \"../../core/IClonable\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class EllipseShape extends EllipseGeometry implements IRenderable, IShape, IClonable<EllipseShape> {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n    constructor(width: number, height: number) {\n        super(width, height);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n\n\n    clone(): EllipseShape {\n        const ellipse = new EllipseShape(this.width, this.height);\n\n        ellipse.fill = this.fill?.clone() ?? null;\n        ellipse.stroke = this.stroke?.clone() ?? null;\n        ellipse.shadow = this.shadow?.clone() ?? null;\n        ellipse.opacity = this.opacity;\n\n        return ellipse;\n    }\n\n}", "import { PieGeometry } from \"../geometries/PieGeometry\";\nimport { Shape } from \"./Shape\";\nimport { type Angle } from \"../../units/Angle\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class PieShape extends PieGeometry implements IRenderable, IShape {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n\n    constructor(width: number, height: number, startAngle: Angle, endAngle: Angle, innerRadius: number) {\n        super(width, height, startAngle, endAngle, innerRadius);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n}", "import { PolygonGeometry } from \"../geometries/mod\";\nimport { Shape } from \"./Shape\";\nimport type { Fill } from \"../../properties/Fill\";\nimport type { IRenderable } from \"../IRenderable\";\nimport type { IRenderingLayer } from \"../../core/RenderingLayer\";\nimport type { IShape } from \"./IShape\";\nimport type { IVector } from \"../../units/Vector\";\nimport type { Shadow } from \"../../properties/Shadow\";\nimport type { Stroke } from \"../../properties/Stroke\";\n\n\nexport class PolygonShape extends PolygonGeometry implements IRenderable, IShape {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n    constructor(...points: IVector[]) {\n        super(...points);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n}", "import { RectangleGeometry } from \"../geometries/mod\";\nimport { Shape } from \"./Shape\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IClonable } from \"../../core/IClonable\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class RectangleShape extends RectangleGeometry implements IRenderable, IShape, IClonable<RectangleShape> {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n    constructor(width: number, height: number) {\n        super(width, height);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n\n\n    clone(): RectangleShape {\n        const rectangle = new RectangleShape(this.width, this.height);\n\n        rectangle.fill = this.fill?.clone() ?? null;\n        rectangle.stroke = this.stroke?.clone() ?? null;\n        rectangle.shadow = this.shadow?.clone() ?? null;\n        rectangle.opacity = this.opacity;\n\n        return rectangle;\n    }\n}", "import { MultipleRadiusInitType, RoundedRectangleGeometry } from \"../geometries/mod\";\nimport { Shape } from \"./Shape\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IClonable } from \"../../core/IClonable\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class RoundedRectangleShape extends RoundedRectangleGeometry implements IRenderable, IShape, IClonable<RoundedRectangleShape> {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(width: number, height: number, ...radius: MultipleRadiusInitType) {\n        super(width, height, ...radius);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n\n\n    clone(): RoundedRectangleShape {\n        const topLeftRadius = { x: this.topLeftRadius.x, y: this.topLeftRadius.y };\n        const topRightRadius = { x: this.topRightRadius.x, y: this.topRightRadius.y };\n        const bottomRightRadius = { x: this.bottomRightRadius.x, y: this.bottomRightRadius.y };\n        const bottomLeftRadius = { x: this.bottomLeftRadius.x, y: this.bottomLeftRadius.y };\n\n        const shape = new RoundedRectangleShape(this.width, this.height, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius);\n        shape.fill = this.fill?.clone() ?? null;\n        shape.stroke = this.stroke?.clone() ?? null;\n        shape.shadow = this.shadow?.clone() ?? null;\n        shape.opacity = this.opacity;\n\n        return shape;\n    }\n}", "import { Shape } from \"./Shape\";\nimport { TrimablePolygonGeometry } from \"../geometries/mod\";\nimport { type Fill } from \"../../properties/Fill\";\nimport { type IRenderable } from \"../IRenderable\";\nimport { type IRenderingLayer } from \"../../core/RenderingLayer\";\nimport { type IShape } from \"./IShape\";\nimport { type IVector } from \"../../units/Vector\";\nimport { type Shadow } from \"../../properties/Shadow\";\nimport { type Stroke } from \"../../properties/Stroke\";\n\n\nexport class TrimablePolygonShape extends TrimablePolygonGeometry implements IRenderable, IShape {\n\n    fill: Fill | null = null;\n    stroke: Stroke | null = null;\n    shadow: Shadow | null = null;\n\n    opacity: number = 1;\n\n    constructor(points: IVector[], closed?: boolean, trimStart?: number, trimEnd?: number, trimOffset?: number) {\n        super(points, closed, trimStart, trimEnd, trimOffset);\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        Shape.renderObject(renderingLayer, this, this, this);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        Shape.renderGizmo(renderingLayer, this);\n    }\n}", "import { Gizmo } from \"../debugger/Gizmo\";\nimport { Numbers } from \"@templatone/utils\";\nimport { Shadow } from \"../properties/Shadow\";\nimport { Transform } from \"../properties/Transform\";\nimport { Vector } from \"../units/Vector\";\nimport { type IBoundingBox } from \"./IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IObject } from \"./IObject\";\nimport { type IRenderable } from \"./IRenderable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { type IVisible } from \"./IVisible\";\nimport { type ValueModifierType } from \"../helpers/valueModifier\";\n\n\nexport class ImageObject implements IObject, IRenderable, IVisible, IClonable<ImageObject> {\n\n    readonly source: HTMLImageElement;\n\n    readonly width: number;\n    readonly height: number;\n\n    transform: Transform = new Transform();\n\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(image: HTMLImageElement, width?: number | ValueModifierType<number>, height?: number | ValueModifierType<number>) {\n        if (image.naturalWidth == 0 || image.naturalHeight == 0) {\n            throw new Error(\"The image is not fully loaded.\");\n        }\n\n        if (width != undefined && height != undefined) {\n            this.width = typeof width == 'number' ? width : width(image.naturalWidth);\n            this.height = typeof height == 'number' ? height : height(image.naturalHeight);\n        } else {\n            this.width = image.naturalWidth;\n            this.height = image.naturalHeight;\n        }\n\n        this.source = image;\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return {\n            origin: this.transform.origin.clone(),\n            size: new Vector(this.width, this.height),\n        }\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        renderingLayer.setMatrixToTransform(t);\n\n        ctx.globalAlpha = Numbers.limit(this.opacity, 0, 1);\n\n        if (this.shadow) {\n            this.shadow.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n        } else {\n            Shadow.clear(renderingLayer);\n        }\n\n        ctx.moveTo(-t.origin.x * pxs, -t.origin.y * pxs);\n        ctx.drawImage(this.source, 0, 0, this.width * pxs, this.height * pxs);\n\n        renderingLayer.resetMatrix();\n\n        ctx.globalAlpha = 1;\n\n        if (renderingLayer.gizmoVisibility && this.renderGizmo) this.renderGizmo(renderingLayer);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        renderingLayer.setMatrixToTransform(this.transform);\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.mediaColor);\n        renderingLayer.resetMatrix();\n    }\n\n\n    clone(): ImageObject {\n        const image = new ImageObject(this.source, this.width, this.height);\n        image.transform = this.transform.clone();\n        image.shadow = this.shadow?.clone() ?? null;\n        image.opacity = this.opacity;\n\n        return image;\n    }\n}", "import { Gizmo } from \"../debugger/Gizmo\";\nimport { Numbers } from \"@templatone/utils\";\nimport { Transform } from \"../properties/Transform\";\nimport { Vector } from \"../units/Vector\";\nimport { type IBoundingBox } from \"./IBoundingBox\";\nimport { type IObject } from \"./IObject\";\nimport { type IRenderable } from \"./IRenderable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { type IVisible } from \"./IVisible\";\nimport { type Shadow } from \"../properties/Shadow\";\n\n\n/** @internal */\nexport class ImageSliceObject implements IObject, IRenderable, IVisible {\n\n    readonly source: HTMLImageElement;\n\n    readonly width: number;\n    readonly height: number;\n\n    sliceX: number;\n    sliceY: number;\n    sliceWidth: number;\n    sliceHeight: number;\n\n    transform: Transform = new Transform();\n\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(source: HTMLImageElement, sliceX: number, sliceY: number, sliceWidth: number, sliceHeight: number) {\n        if (source.naturalWidth == 0 || source.naturalHeight == 0) {\n            throw new Error(\"The image is not fully loaded.\");\n        }\n\n        this.width = sliceWidth;\n        this.height = sliceHeight;\n\n        this.sliceX = sliceX;\n        this.sliceY = sliceY;\n\n        this.sliceWidth = sliceWidth;\n        this.sliceHeight = sliceHeight;\n\n        this.source = source;\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return {\n            origin: this.transform.origin.clone(),\n            size: new Vector(this.width, this.height),\n        }\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        ctx.globalAlpha = Numbers.limit(this.opacity, 0, 1);\n\n        renderingLayer.setMatrixToTransform(t);\n\n        ctx.moveTo(-t.origin.x * pxs, -t.origin.y * pxs);\n        ctx.drawImage(this.source, this.sliceX, this.sliceY, this.sliceWidth, this.sliceHeight, 0, 0, this.width * pxs, this.height * pxs);\n\n        renderingLayer.resetMatrix();\n\n        ctx.globalAlpha = 1;\n\n        if (renderingLayer.gizmoVisibility && this.renderGizmo) this.renderGizmo(renderingLayer);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        renderingLayer.setMatrixToTransform(this.transform);\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.mediaColor);\n        renderingLayer.resetMatrix();\n    }\n\n\n    getImageElement(): HTMLImageElement {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.width;\n        canvas.height = this.height;\n\n        document.body.appendChild(canvas);\n\n        const ctx = canvas.getContext('2d')! as CanvasRenderingContext2D;\n\n        ctx.drawImage(this.source, this.sliceX, this.sliceY, this.sliceWidth, this.sliceHeight, 0, 0, this.width, this.height);\n\n        const dataURL = canvas.toDataURL('image/png');\n\n        const imageElement = document.createElement('img');\n        imageElement.src = dataURL;\n\n        return imageElement;\n    }\n}", "import { Gizmo } from \"../debugger/Gizmo\";\nimport { Numbers } from \"@templatone/utils\";\nimport { Shadow } from \"../properties/Shadow\";\nimport { Transform } from \"../properties/Transform\";\nimport { Vector } from \"../units/Vector\";\nimport { type IBoundingBox } from \"./IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IObject } from \"./IObject\";\nimport { type IRenderable } from \"./IRenderable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { type IVisible } from \"./IVisible\";\nimport { type ValueModifierType } from \"../helpers/valueModifier\";\n\n\ntype TimeEntry =\n    | [seconds: number]\n    | [frames: number, fps: number];\n    \n\n\nexport class VideoObject implements IObject, IRenderable, IVisible, IClonable<VideoObject> {\n\n    readonly source: HTMLVideoElement;\n\n    readonly width: number;\n    readonly height: number;\n\n    transform: Transform = new Transform();\n\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(source: HTMLVideoElement, width?: number | ValueModifierType<number>, height?: number | ValueModifierType<number>) {\n        if (width != undefined && height != undefined) {\n            this.width = typeof width == 'number' ? width : width(source.width);\n            this.height = typeof height == 'number' ? height : height(source.height);\n        } else {\n            this.width = source.width;\n            this.height = source.height;\n        }\n\n        this.source = source;\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return {\n            origin: this.transform.origin.clone(),\n            size: new Vector(this.width, this.height),\n        }\n    }\n\n\n    setTime(...entry: TimeEntry) {\n        const miliseconds = (() => {\n            if (entry.length == 1) {\n                const [seconds] = entry;\n                return seconds * 1_000;\n            } else {\n                const [frames, fps] = entry;\n                return frames * 1_000 / fps;\n            }\n        })();\n\n        this.source.currentTime = miliseconds / 1_000;\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        renderingLayer.setMatrixToTransform(t);\n\n        ctx.globalAlpha = Numbers.limit(this.opacity, 0, 1);\n\n        if (this.shadow) {\n            this.shadow.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n        } else {\n            Shadow.clear(renderingLayer);\n        }\n\n        ctx.moveTo(-t.origin.x * pxs, -t.origin.y * pxs);\n        ctx.drawImage(this.source, 0, 0, this.width * pxs, this.height * pxs);\n\n        renderingLayer.resetMatrix();\n\n        ctx.globalAlpha = 1;\n\n        if (renderingLayer.gizmoVisibility && this.renderGizmo) this.renderGizmo(renderingLayer);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        renderingLayer.setMatrixToTransform(this.transform);\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.mediaColor);\n        renderingLayer.resetMatrix();\n    }\n\n\n    clone(): VideoObject {\n        const image = new VideoObject(this.source, this.width, this.height);\n        image.transform = this.transform.clone();\n        image.shadow = this.shadow?.clone() ?? null;\n        image.opacity = this.opacity;\n\n        return image;\n    }\n}", "import { Gizmo } from \"../debugger/Gizmo\";\nimport { Transform } from \"../properties/Transform\";\nimport { Vector } from \"../units/Vector\";\nimport { type IBoundingBox } from \"./IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IObject } from \"./IObject\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class NullObject implements IObject, IClonable<NullObject> {\n\n    transform: Transform = new Transform();\n\n\n    constructor() { }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        return {\n            origin: this.transform.origin.clone(),\n            size: Vector.Zero,\n        }\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        if (renderingLayer.gizmoVisibility && this.renderGizmos) this.renderGizmos(renderingLayer);\n    }\n\n\n    renderGizmos(renderingLayer: IRenderingLayer) {\n        renderingLayer.setMatrixToTransform(this.transform);\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.nullColor);\n        renderingLayer.resetMatrix();\n    }\n\n\n    clone(): NullObject {\n        const n = new NullObject();\n        n.transform = this.transform.clone();\n\n        return n;\n    }\n}", "import { Color } from \"../styles/Color\";\nimport { Fill } from \"../properties/Fill\";\nimport { Font } from \"../properties/Font\";\nimport { Gizmo } from \"../debugger/Gizmo\";\nimport { Numbers, Regex } from \"@templatone/utils\";\nimport { Shadow } from \"../properties/Shadow\";\nimport { Stroke } from \"../properties/Stroke\";\nimport { Transform } from \"../properties/Transform\";\nimport { Vector } from \"../units/Vector\";\nimport { type IBoundingBox } from \"./IBoundingBox\";\nimport { type IClonable } from \"../core/IClonable\";\nimport { type IObject } from \"./IObject\";\nimport { type IRenderable } from \"./IRenderable\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { type IShape } from \"./shapes/IShape\";\n\n\nexport class TextObject implements IObject, IRenderable, IShape, IClonable<TextObject> {\n\n    transform: Transform = new Transform();\n\n    private _contentLines: string[] = [];\n    get content(): string {\n        return this._contentLines.join('\\n');\n    }\n    set content(content: string) {\n        this._contentLines = content.split(Regex.breakLines());\n    }\n\n    fill: Fill | null = new Fill(Color.Black);\n    stroke: Stroke | null = null;\n    font: Font = new Font();\n\n    shadow: Shadow | null = null;\n    opacity: number = 1;\n\n\n    constructor(content: string) {\n        this.content = content;\n    }\n\n\n    getBoundingBox(renderingLayer: IRenderingLayer): IBoundingBox {\n        this.font.apply(renderingLayer);\n\n        const ctx = renderingLayer.getRenderingContext();\n\n        let width: number = 0;\n        let height: number = 0;\n\n        this._contentLines.forEach((line, i) => {\n            const w = ctx.measureText(line).width;\n\n            if (width < w) width = w;\n            height += this.font.lineHeight\n        });\n\n        return {\n            origin: this.transform.origin.clone(),\n            size: new Vector(Math.ceil(width), Math.ceil(height)),\n        }\n    }\n\n\n    render(renderingLayer: IRenderingLayer) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const t = this.transform;\n\n        ctx.globalAlpha = Numbers.limit(this.opacity, 0, 1);\n\n        renderingLayer.setMatrixToTransform(t);\n\n        ctx.moveTo(-t.origin.x, -t.origin.y);\n\n        this.font.apply(renderingLayer);\n\n        const lineheight = this.font.lineHeight * pxs;\n\n        this._contentLines.forEach((line, i) => {\n            if (this.shadow) {\n                this.shadow.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n            } else {\n                Shadow.clear(renderingLayer);\n            }\n\n            if (this.fill) {\n                this.fill.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n                ctx.fillText(line, 0, (i + 1) * lineheight);\n            } else {\n                Fill.clear(renderingLayer);\n            }\n\n            if (this.stroke) {\n                this.stroke.apply(renderingLayer, this.getBoundingBox(renderingLayer));\n                ctx.strokeText(line, 0, (i + 1) * lineheight);\n            } else {\n                Stroke.clear(renderingLayer);\n            }\n        });\n\n        renderingLayer.resetMatrix();\n\n        ctx.globalAlpha = 1;\n\n        if (renderingLayer.gizmoVisibility && this.renderGizmo) this.renderGizmo(renderingLayer);\n    }\n\n\n    renderGizmo(renderingLayer: IRenderingLayer) {\n        renderingLayer.setMatrixToTransform(this.transform);\n        Gizmo.origin(renderingLayer, Vector.Zero, Gizmo.textColor);\n        renderingLayer.resetMatrix();\n    }\n\n\n    clone(): TextObject {\n        const text = new TextObject(this.content);\n\n        text.transform = this.transform.clone();\n        text.fill = this.fill?.clone() ?? null;\n        text.stroke = this.stroke?.clone() ?? null;\n        text.font = this.font?.clone() ?? null;\n        text.shadow = this.shadow?.clone() ?? null;\n        text.opacity = this.opacity;\n\n        return text;\n    }\n}", "import { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IColorRGBA } from \"./Color\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\nimport { type IStyle } from \"./Style\";\nimport { VectorType, Vector } from \"../units/mod\";\n\n\nexport abstract class Gradient implements IGradient, IStyle {\n    start: Vector;\n    end: Vector;\n\n    steps: IGradientStep[] = [];\n\n    constructor(start: VectorType, end: VectorType, steps: IGradientStep[]) {\n        this.start = new Vector(start);\n        this.end = new Vector(end);\n        this.steps = steps;\n    }\n\n\n    computeStyle(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox): string | CanvasGradient | CanvasPattern {\n        throw new Error(\"Mehod `getStyle` is not implemented.\");\n    }\n}\n\n\nexport interface IGradient {\n    start: Vector;\n    end: Vector;\n\n    steps: IGradientStep[];\n}\n\n\nexport interface IGradientStep {\n    offset: number,\n    color: IColorRGBA,\n}", "import { Gradient } from \"./Gradient\";\nimport { Numbers } from \"@templatone/utils\";\nimport { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class LinearGradient extends Gradient {\n\n    computeStyle(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const startPoint = this.start.clone().multiple(boundingBox.size).subtract(boundingBox.origin);\n        const endPoint = this.end.clone().multiple(boundingBox.size).subtract(boundingBox.origin);\n\n        const gradient = ctx.createLinearGradient(\n            startPoint.x * pxs,\n            startPoint.y * pxs,\n            endPoint.x * pxs,\n            endPoint.y * pxs\n        );\n\n        this.steps.forEach(step => {\n            const offset: number = Numbers.limit(step.offset, 0, 1);\n            const color = `rgba(${step.color.red.toFixed(3)}, ${step.color.green.toFixed(3)}, ${step.color.blue.toFixed(3)}, ${step.color.alpha.toFixed(3)})`;\n\n            gradient.addColorStop(offset, color);\n        });\n\n        return gradient;\n    }\n}", "import { Gradient } from \"./Gradient\";\nimport { Numbers } from \"@templatone/utils\";\nimport { type IBoundingBox } from \"../renderables/IBoundingBox\";\nimport { type IRenderingLayer } from \"../core/RenderingLayer\";\n\n\nexport class RadialGradient extends Gradient {\n\n    computeStyle(renderingLayer: IRenderingLayer, boundingBox: IBoundingBox) {\n        const ctx = renderingLayer.getRenderingContext();\n        const pxs = renderingLayer.pixelScale;\n\n        const centerPoint = this.start.clone()\n            .multiple(boundingBox.size)\n            .add(boundingBox.origin)\n            .absolute();\n\n        const radiusPoint = this.end.clone()\n            .multiple(boundingBox.size)\n            .add(boundingBox.origin)\n            .absolute();\n\n        if (centerPoint.isEquals(radiusPoint) == false) {\n            const gradient = ctx.createRadialGradient(\n                centerPoint.x * pxs,\n                centerPoint.y * pxs,\n                0,\n                centerPoint.x * pxs,\n                centerPoint.y * pxs,\n                radiusPoint.subtract(centerPoint).length * pxs);\n\n            this.steps.forEach(step => {\n                const offset: number = Numbers.limit(step.offset, 0, 1);\n                const color = `rgba(${step.color.red.toFixed(3)}, ${step.color.green.toFixed(3)}, ${step.color.blue.toFixed(3)}, ${step.color.alpha.toFixed(3)})`;\n\n                gradient.addColorStop(offset, color);\n            });\n\n            return gradient;\n\n        } else {\n            const gradient = ctx.createRadialGradient(0, 0, 0, 1, 1, 1);\n            const step = this.steps[this.steps.length - 1];\n            const color = `rgba(${step.color.red.toFixed(3)}, ${step.color.green.toFixed(3)}, ${step.color.blue.toFixed(3)}, ${step.color.alpha.toFixed(3)})`;\n\n            gradient.addColorStop(0, color);\n            gradient.addColorStop(1, color);\n\n            return gradient;\n        }\n\n    }\n}"],
  "mappings": "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",
  "names": []
}
